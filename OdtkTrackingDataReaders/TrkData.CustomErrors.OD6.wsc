<?xml version="1.0"?>
<!-- ====================================================== -->
<!-- This ODTK reader reads measurements in a custom format -->
<!-- and then allows the user to add custom noise           -->
<!--                                                        -->
<!-- to create measurements in the expected format, run     -->
<!-- the simulator with NoDeviations = true. Then export    -->
<!-- the measurements in a custom export style that         -->
<!-- consists of comma delimited values of                  -->
<!--  - MeasurementHistory.Date Time                        -->
<!--  - MeasurementHistory.TrackerID                        -->
<!--  - MeasurementHistory.SatelliteID                      -->
<!--  - MeasurementHistory.Measurement Type                 -->
<!--  - MeasurementHistory.Value                            -->
<!--  - MeasurementHistory.Measurement Units                -->
<!--  - MeasurementHistory.WN                               -->
<!--                                                        -->
<!--  author: jens ramrath                                  -->
<!--  date: 18 feb 2019                                     -->
<!-- ====================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="SHAR Format"
    progid="TrkData.CustomErrors.OD6.wsc"
    version="1.00"
    classid="{C119D27B-8609-4E19-A061-470EEE7F5A7D}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

  <method name="CloseFile"/>

  <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[

    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

	Dim dict
	Set dict = CreateObject("Scripting.Dictionary")

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

	Dim measDict
	Set measDict = CreateObject("Scripting.Dictionary")
	measDict.Add "Range", 1
	measDict.Add "Doppler", 2
	measDict.Add "Azimuth", 11
	measDict.Add "Elevation", 12
	measDict.Add "Right Ascension", 18
	measDict.Add "Declination", 19

	measDict.Add "SB Right Ascension", 31
	measDict.Add "SB Declination", 32
	measDict.Add "SB Range", 33
	measDict.Add "SB Azimuth", 34
	measDict.Add "SB Elevation", 35
	measDict.Add "SB Doppler", 36

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------

    Dim m_sfileSysObj, m_Stream, m_sFileName, trackerID, targetID, measType, measValue, measUnit, measWN

    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")

    m_sFileName = ""

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------

    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar

    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)


   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------

    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then

            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False

        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)

		dim line

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)
        Else
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)

			'-------------------------------------------------------------------------
			' Read header information to find the satellite ID
			'-------------------------------------------------------------------------
			
			' no header in this measurement type

		End If

    End Function

	'-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

        dim line, lineSplit, datetime, prevdatetime, obsval, station
        dim groundequip, antenna, calstatus, numObsSets
        Dim rg, az, el

		prevdatetime = ""

		pObsSet.Clear()
		numObsSets = 0

		' Note that we are going to process the entire file of data and return ALL
		' measurements.  We sort of have to because we need to be checking all the
		' time tags to identify obs sets.

		' Date Time,Tracker ID,Satellite ID,Measurement Type,Value,Measurement Units,WN
		' 27 Oct 2018 14:00:00.000000,   3507,   1000,Range,    1.6356e+06,m,     -0.264571
		' 27 Oct 2018 14:00:00.000000,   3507,   1000,Doppler,      -6004.49,m/sec,       3.65133
		' 27 Oct 2018 14:00:00.000000,   3507,   1000,Azimuth,       337.418,deg,     0.0201678
		' 27 Oct 2018 14:00:00.000000,   3507,   1000,Elevation,       10.2797,deg,    0.00471196
		' 27 Oct 2018 14:01:00.000000,   3507,   1000,Range,   1.30038e+06,m,     -0.527019
		
		
        Do Until m_Stream.AtEndOfStream or numObsSets > 0

            line = m_Stream.ReadLine
			lineSplit = Split(line, ",")


			' skip header and empty lines
            if (UBound(lineSplit) = 6) AND NOT (lineSplit(0) = "Date Time") then

                datetime    = Trim(lineSplit(0))
                trackerID	= Trim(lineSplit(1))
                targetID	= Trim(lineSplit(2))
                measType	= Trim(lineSplit(3))
                measValue	= Trim(lineSplit(4))
                measUnit	= Trim(lineSplit(5))
                measWN		= Trim(lineSplit(6))
                

				pObsSet.Clear()
				pObsSet.Date.unit = "UTCG"
				pObsSet.Date      = datetime

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit  = "UTCG"
				pObs.Date       = datetime
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs. Facility must come first for 2-way ranging.
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, trackerID				' Facility must be first item
				pObs.TrackerIDs.Insert 1, targetID	 			' Satellite follows Facility


				'-------------------------------------------------------------------------
				' update measurement value to include noise/errors/...
				'-------------------------------------------------------------------------
				
				Select case measType
					case "Range"
						measValue = measValue + 1.0
					case "Doppler"
						measValue = measValue*1.2345
					case "Azimuth"
					case "Elevation"
					case "Right Ascension"
					case "Declination"
					case "SB Right Ascension"
					case "SB Declination"
					case "SB Range"
					case "SB Azimuth"
					case "SB Elevation"
					case "SB Doppler"
				end select
				
				'-------------------------------------------------------------------------
				' push to ODTK
				'-------------------------------------------------------------------------
				
				pObs.MeasureType  = measDict.Item(measType)
				pObs.value.Unit   = measUnit
				pObs.value        = measValue
				pObsSet.Add pObs



				If pObsSet.Count > 0 Then
					setColl.Add pObsSet
					numObsSets = numObsSets + 1
				End If

        	End If

		Loop

        GetObsSet = numObsSets

    End Function  ' GetObsSet

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

