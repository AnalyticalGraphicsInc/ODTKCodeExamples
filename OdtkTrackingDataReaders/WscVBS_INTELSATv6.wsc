<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  Copyright 2006, Analytical Graphics, Inc.            -->
<!--                                                       -->
<!--  This file sets up the ODTK reader for Intelsat       -->
<!--                                                       -->
<!--  http://www.guidgenerator.com/                        -->
<!--                                                       -->
<!--  dvallado  23 aug 2011                                -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="INTELSAT Format"
    progid="WscVBS_INTELSATv6.wsc"
    version="1.00"
    classid="{ED9AED6F-D0D1-4b61-B92A-43118040F14C}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
    
	Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

        dim date, line, year, month, day, hours, mins, secs, range, calrange, ucalrange, station, satellite
        dim meas_type, zcal, rcal, sc_delay, a_transcal, azel_offset, az, el, err, numSets

        numSets = 0
        pObsSet.Clear
		
		
        Do Until m_Stream.AtEndOfStream Or numSets > 0

            line = m_Stream.ReadLine
            
      		  '-------------------------------------------------------------------------
          	' parse the line (see sample below'
            '
            '     802       25 1 2010233 012440.827 258448305.00 258504213   41459     0 14798.00  349.00   0.000 999.990  99.990  0
            ' 3006 72 1 2006299 000526.888 251065921.00 251123316   49109  -636  8958.00   36.00   0.00 999.99  99.99  0
    		    '-------------------------------------------------------------------------
    		
            oRegExp.pattern = "^\s+?(\S+)\s+(\S+)\s+(\S+)\s+(\d{4})(\d{3})\s+(\d{2})(\d{2})(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
            oRegExp.global = false
            set oMatches = oRegExp.Execute(line)
                                    
            if oMatches.Count > 0 then
            
                satellite   = oMatches(0).submatches(0)
                station     = oMatches(0).submatches(1)
                meas_type   = oMatches(0).submatches(2) 
                year        = oMatches(0).submatches(3) 
                day         = oMatches(0).submatches(4) 
                hours       = oMatches(0).submatches(5) 
                mins        = oMatches(0).submatches(6) 
                secs        = oMatches(0).submatches(7) 
                calrange    = oMatches(0).submatches(8) 
                ucalrange   = oMatches(0).submatches(9) 
                zcal        = oMatches(0).submatches(10) 
                rcal        = oMatches(0).submatches(11) 
                sc_delay    = oMatches(0).submatches(12) 
                a_transcal  = oMatches(0).submatches(13) 
                azel_offset = oMatches(0).submatches(14) 
                az          = 1.0 * oMatches(0).submatches(15) 
                el          = 1.0 * oMatches(0).submatches(16) 
                err         = oMatches(0).submatches(17) 
                
                if (err = 0) then
					          '-------------------------------------------------------------------------
					          ' Reassemble the date into a UTCJFOUR format.  This is the closest
					          ' representation to what was input and avoids messy date
					          ' conversion code.  Let ODTK do the work!
					          '-------------------------------------------------------------------------
					          date =  day & "/" & year & " " & hours & ":" & mins & ":" & secs
                
					          '-------------------------------------------------------------------------
					          ' Initialize observation and obs set
					          '-------------------------------------------------------------------------
                    pObsSet.Clear()
                    pObsSet.Date.unit = "UTCJFOUR"
                    pObsSet.Date      = date
					
                    '-------------------------------------------------------------------------
                    ' Initialize observation
                    '-------------------------------------------------------------------------
					          pObs.Date.unit = "UTCJFOUR"
					          pObs.Date      = date
                    pObs.TimeOrigin = eGroundReceiveTime

					          '-------------------------------------------------------------------------
					          ' Set up facility and satellite IDs
					          ' In TrackerIDs list: facility must come first
					          '-------------------------------------------------------------------------
					          pObs.TrackerIDs.Clear()
					          pObs.TrackerIDs.Insert 0, station  	' Facility must be first item
					          pObs.TrackerIDs.Insert 1, satellite ' Satellite follows Facility

					          Select Case meas_type
					
					          case 1
					          	'-------------------------------------------------------------------------
						          ' Range measurement
						          '-------------------------------------------------------------------------
						          range = calrange * 1.e-9 * AgCSpeedOfLight / 2
						          pObs.MeasureType  = eMTRange
						          pObs.value.Unit   = "m"
						          pObs.value        = range
						          pObsSet.Add pObs

					          case 2
					          	'-------------------------------------------------------------------------
						          ' Azimuth measurement
					          	'-------------------------------------------------------------------------
						          pObs.MeasureType  = eMTAzimuth
						          pObs.value.Unit   = "deg"
						          pObs.value        = az
						          pObsSet.Add pObs

                      pObs.MeasureType  = eMTElevation
						          pObs.value.Unit   = "deg"
						          pObs.value        = el
						          pObsSet.Add pObs

					          case 3
					          	'-------------------------------------------------------------------------
					          	' Elevation measurement
					          	'-------------------------------------------------------------------------
					          	range = calrange * 1.e-9 * AgCSpeedOfLight / 2
					          	pObs.MeasureType  = eMTRange
					          	pObs.value.Unit   = "m"
					          	pObs.value        = range
					          	pObsSet.Add pObs

                      pObs.MeasureType  = eMTAzimuth
					          	pObs.value.Unit   = "deg"
					          	pObs.value        = az
					          	pObsSet.Add pObs

                      pObs.MeasureType  = eMTElevation
						          pObs.value.Unit   = "deg"
					          	pObs.value        = el
					          	pObsSet.Add pObs

				          	End Select

				          	'-------------------------------------------------------------------------
					          ' Any Valid Meas? 
					          '-------------------------------------------------------------------------
				          	If pObsSet.Count > 0 Then
				          		numSets = numSets + 1
				          		setColl.Add pObsSet
				          	End If
				          	
			          	End if  ' if err = 0
                
        	End If  ' if oMatches.Count > 0
        	
		Loop
		
        GetObsSet = numSets

    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

