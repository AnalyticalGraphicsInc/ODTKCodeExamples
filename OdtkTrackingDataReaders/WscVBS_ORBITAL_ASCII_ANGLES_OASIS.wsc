<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  This WSC is designed to read OASIS format            -->
<!--  ASCII tracking data files and pass the measurements  -->
<!--  in to AGI's Orbit Determination Tool Kit (ODTK).     -->
<!--                                                       -->
<!--  Author: Tom Johnson, AGI                             -->
<!--  updated by jens ramrath to read OASIS data           -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="ORBITAL ASCII ANGLES OASYS Format"
    progid="WscVBS_ORBITAL_ASCII_ANGLES_OASIS.wsc"
    version="1.00"
    classid="{EF45C3FC-FE36-4861-A01B-EEFD0E183491}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
    
	Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "5.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim date, line, year, month, day, hours, mins, secs, range, calrange, ucalrange, station, satellite
        dim meas_type, zcal, rcal, sc_delay, a_transcal, azel_offset, az, el, err, numSets
        Dim value, units

        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0


		' put satellite and station IDs in lookup table
		Dim satelliteID
		Set satelliteID = CreateObject("Scripting.Dictionary")
		satelliteID.Add "HZ2", 1001

		Dim stationID
		Set stationID = CreateObject("Scripting.Dictionary")
		stationID.Add "14m_bel", 	103 
		stationID.Add "12.5m_crk",	104
		stationID.Add "13m_Hbk",	105


    
		' ***** read header *****
		Dim spacecraftName
		Dim stationName
		
		line = "null"
		
		Do Until m_Stream.AtEndOfStream or line = "DATA:"
			line = trim(m_Stream.ReadLine)
			
            if line <> "DATA:" then
				' parse header
				oRegExp.pattern = "\s?(\S+)\s+(.+)"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				dim part1
				dim part2
				part1 = oMatches(0).submatches(0)
				part2 = oMatches(0).submatches(1) 

				if debug <> 0 then
					msgbox("part1: " & part1 & (Chr(13)& Chr(10)) & "part2: " & part2)
				end if

				' spacecraft id
				if part1 = "SPACECRAFT:" then
					spacecraftName = trim(part2)
					satellite = satelliteID.Item(spacecraftName)
				' station id
				elseif part1 = "STATION:" then
					stationName = trim(part2)
					station = stationID.Item(stationName)
				end if
			end if
		loop
		if debug <> 0 then
			msgbox("finished reading the header")
		end if



        Do Until m_Stream.AtEndOfStream   ' Or numSets > 0

            line = m_Stream.ReadLine
            

			' ***** parse measurement data *****
			' sample lines:
			' 2007/356 00:52:59.700  AZIMUTH      84.723  DEGREES
			' 2007/356 00:52:59.700  ELEVATION     5.787  DEGREES
    		
    		
            oRegExp.pattern = "\s?(\d{4})/(\d{3})\s+(\d{2}):(\d{2}):(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
            oRegExp.global = false
            set oMatches = oRegExp.Execute(line)
                                    
            if oMatches.Count = 1 then
            	
            	year		= oMatches(0).submatches(0)
            	day			= oMatches(0).submatches(1) 
            	hours		= oMatches(0).submatches(2) 
				mins		= oMatches(0).submatches(3) 
                secs		= oMatches(0).submatches(4) 
            	meas_type   = oMatches(0).submatches(5)
            	value		= oMatches(0).submatches(6)
            	units		= oMatches(0).submatches(7)
            	


				'-------------------------------------------------------------------------
				' Reassemble the date into a UTCJFOUR format.  This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------

				date =  day & "/" & year & " " & hours & ":" & mins & ":" & secs

				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "UTCJFOUR"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit = "UTCJFOUR"
				pObs.Date      = date
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, station  	' Facility must be first item
				pObs.TrackerIDs.Insert 1, satellite ' Satellite follows Facility


				if meas_type = "AZIMUTH" then
					' Az
					pObs.MeasureType	= eMTAzimuth
					pObs.Value.Unit		= units
					pObs.Value.Value	= value
					pObsSet.Add pObs
					
				else
					' El
					pObs.MeasureType	= eMTElevation
					pObs.Value.Unit		= units
					pObs.Value.Value	= value
					pObsSet.Add pObs
				end if

				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13)& Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13)& Chr(10)) & " value: " & pObs.Value.Value)
				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
					
        	End If
		Loop
		
		
		'if debug <> 0 then
		'	msgbox("Time: " & date & (Chr(13)& Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13)& Chr(10)) & " value: " & pObs.Value.Value)
		'end if
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

