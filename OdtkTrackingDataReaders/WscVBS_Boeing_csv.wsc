<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  Copyright 2006, Analytical Graphics, Inc.            -->
<!--                                                       -->
<!--  This file sets up the ODTK reader for AFTest         -->
<!--                                                       -->
<!--  http://www.guidgenerator.com/                        -->
<!--                                                       -->
<!--  dvallado  14 jan 2014                                -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="Rincon Format"
    progid="WscVBS_Boeing_csv.wsc"
    version="1.00"
    classid="{5990DC92-FCA8-4E1C-8836-DDDF3F24801A}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="CloseFile"/>
   
   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[
    
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    Const eMTGround_TDOA      =  133   
    Const eMTGround_FDOA      =  134 

    '-------------------------------------------------------------------------
    ' define some global variables we'll be using
    '-------------------------------------------------------------------------
    
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
    ' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
    
    dim oRegExp, oMatches, oMatch
    
    Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
    ' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Dim satellite
    
    Function GetFileName()

       GetFileName = m_sFileName      

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)
			' get satellite ID from m_sFileName
			Dim filePathSplit
			filePathSplit = Split(m_sFileName, "\")
	   
		   ' check if filename starts with ABS
		   if UCase(Left(filePathSplit(Ubound(filePathSplit)), 3)) = "ABS" then
			  satellite = 40424
		   else
			  satellite = 40425
		   end if			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If
        
    End Function
    
    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

		dim date, time, dateTime, ant, az, el, rg
        dim line, station
        dim deltaRng, deltaRngRate, sen1, sen2, numsets, meas_type, freq, emitter
        
        numSets = 0
        pObsSet.Clear
        
        
        Do Until m_Stream.AtEndOfStream Or numSets > 0

            line = m_Stream.ReadLine
            
            '-------------------------------------------------------------------------
            ' parse the line (see sample below'
            '
            ' #Date,Time,AntennaID,Azimuth,Elevation,Range
			' #UTC,UTC,,degrees,degrees,km
			' 2015/03/06,02:31:54.910,83,232.380000,34.900000,65022.955
			' 2015/03/06,02:39:23.830,83,233.999000,33.960000,64951.489

            '-------------------------------------------------------------------------

			' throw out comments
			if left(Trim(line), 1) <> "#" then
				Dim lineSplit
				lineSplit = Split(line, ",")

				date = lineSplit(0)
				time = lineSplit(1)
				ant  = lineSplit(2)
				az   = lineSplit(3)		' degree
				el   = lineSplit(4)		' degree
				rg   = lineSplit(5)		' km
				

				'-------------------------------------------------------------------------
				' Reassemble the date into a UTCJFOUR format.  This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------

				dateTime =  date & " " & time

				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "YYYY/MM/DD"
				pObsSet.Date      = dateTime

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit = "YYYY/MM/DD"
				pObs.Date      = dateTime
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()

				pObs.TrackerIDs.Insert 0, ant
				pObs.TrackerIDs.Insert 1, satellite          

				' filter out bogus az values
				
				if (az <> 999.99) then
					pObs.MeasureType  = eMTAzimuth
					pObs.value.Unit   = "deg"
					pObs.value        = az 
					pObsSet.Add pObs
				end if

				' filter out bogus el values
				
				if (el <> 99.99) then				
					pObs.MeasureType  = eMTElevation
					pObs.value.Unit   = "deg"
					pObs.value        = el
					pObsSet.Add pObs  
				end if

				' there are cases where there is no range data
				if rg <> "" then
					pObs.MeasureType  = eMTRange
					pObs.value.Unit   = "km"
					pObs.value        = rg
					pObsSet.Add pObs
				end if
				
				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If


			 end if		' ignore comment
            
        Loop
        
        GetObsSet = numSets

    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
        Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
        Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

