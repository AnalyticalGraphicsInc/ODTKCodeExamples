<?xml version="1.0"?>

<!-- ======================================================== -->
<!--  ODTK data reader for Egypts                             -->
<!--  National Research Institute of Astronomy and Geophysics -->
<!--                                                          -->
<!--  author: jens ramrath, 3 sep 2019                        -->
<!-- ======================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="Arabsat Format 2"
    progid="TrkDataReader.NRIAG.ODTK6.wsc"
    version="1.00"
    classid="{60EF9367-7BC9-44B9-A6E3-545EE77D7595}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

  <method name="CloseFile"/>

  <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[

    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------

    Dim m_sfileSysObj, m_Stream, m_sFileName, m_Satellite, m_Tracker

    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")

    m_sFileName = ""

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------

    dim oRegExp, oMatches, oMatch

	Set oRegExp = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------

    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar

    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

	'-------------------------------------------------------------------------
	' Define look up tables to translate names to ID numbers
    '-------------------------------------------------------------------------

	Dim satIDs
	Set satIDs = CreateObject("Scripting.Dictionary")
	satIDs.Add "1", "1001"
	satIDs.Add "2", "1002"
	satIDs.Add "3", "1003"
	satIDs.Add "4", "1004"

      		

	Dim facIDs
	Set facIDs = CreateObject("Scripting.Dictionary")
	facIDs.Add "F1", "501"

	

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------

    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then

            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False

        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)

		dim line

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)
        Else
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)

			'-------------------------------------------------------------------------
			' Read header information to find the satellite ID and the tracker ID
			'-------------------------------------------------------------------------

'			Dim filePathSplit
'			filePathSplit = Split(m_sFileName, "\")
'			
'			Dim fileNameSplit
'			fileNameSplit = Split(filePathSplit(Ubound(filePathSplit)), "_")
'	   
'		   	' check if filename starts with ABS
'		   	if UBound(fileNameSplit) < 2 then
'		   		msgbox("the filename was not of the expected format. The reader expects ""<satelliteID>_xxx_<tracker ID>.xxx"" where xxx can be any arbitrary text")
'		   		Wscript.Quit
'			end if
'
'			Dim trackerSplit
'			trackerSplit = Split(fileNameSplit(Ubound(fileNameSplit)), ".")
'
'			m_Satellite     = fileNameSplit(0)
'			m_Tracker		= trackerSplit(0)
		End If

    End Function

	'-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

        dim line, datetime, obsval, station
        dim numObsSets
        dim date, time, ra, dec

		pObsSet.Clear()
		numObsSets = 0


		'-------------------------------------------------------------------------
		' parse the line (see sample below)
		'
		' #1
		' 160419 20475327 09060387 -04383706 001130
		' 160419 20520412 09101544 -04383396 001130
		' 160419 21050961 09232299 -04382288 001129
		' 160419 21092076 09273482 -04381969 001128
		' 160419 21133164 09314643 -04381543 001126
		' 160419 21174365 09355901 -04381321 001129
		'
		'-------------------------------------------------------------------------
		
		
		oRegExp.pattern  = "(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\d+)\s?"

        Do Until m_Stream.AtEndOfStream or numObsSets > 0

			' read next line
            line = m_Stream.ReadLine


			' look for satellite ID
			if Left(Trim(line), 1) = "#" AND IsNumeric(Mid(Trim(line), 2)) then
				m_Satellite = Mid(Trim(line), 2)
			end if


			' look for measurements
            set oMatches = oRegExp.Execute(line)

            if oMatches.Count = 1 then

                date        = oMatches(0).submatches(0)
                time        = oMatches(0).submatches(1)
                ra          = oMatches(0).submatches(2)
                dec         = oMatches(0).submatches(3)


				' date format: 160419 - 16- day, 04 month , 19- year 2019
				Dim dateString
				dateString = Left(date, 2) & "/" & Mid(date, 3, 2) & "/20" & Mid(date, 5, 2)

				' time format: 20475327 - exp time 20 hour 47 min 53.27 sec 
				Dim timeString
				timeString = Left(time, 2) & ":" & Mid(time, 3, 2) & ":" & Mid(time, 5, 2) & "." & Mid(time, 7, 2)
				
				
				dateTime = dateString & " " & timeString
				
				' ra format: 09060387 - RA 2000 09 hour 06 min 03.87 sec
				' first convert all to seconds, then to degree
				Dim raDeg
				raDeg = (Left(ra, 2)*60.0*60.0 + Mid(ra, 3, 2)*60.0 + (Mid(ra, 5, 2) & "." & Mid(ra, 7, 2)))*(360.0/60.0/60.0/24.0)

				' dec format: -04383706 - DEC 2000 -4 deg 38 arcmin 37.06 arcsec
				Dim decDeg
				decDeg = Mid(dec, 2, 2) + Mid(dec, 4, 2)/60.0 + (Mid(dec, 6, 2) & "." & Mid(dec, 8, 2))/60.0/60.0
				if Left(dec, 1) = "-" then
					decDeg = decDeg * (-1)
				end if

				pObsSet.Clear()
				pObsSet.Date.unit = "DD/MM/YYYY"
				pObsSet.Date      = dateTime

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit  = "DD/MM/YYYY"
				pObs.Date       = datetime
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs. Facility must come first for 2-way ranging.
				'-------------------------------------------------------------------------
	
				pObs.TrackerIDs.Clear()
				'pObs.TrackerIDs.Insert 0, m_Tracker			' Facility must be first item
				pObs.TrackerIDs.Insert 0, 500
				pObs.TrackerIDs.Insert 1, m_Satellite			' Satellite follows Facility
				

				pObs.MeasureType  = eMTRightAscension
				pObs.value.Unit   = "deg"
				pObs.value        = raDeg
				pObsSet.Add pObs

				pObs.MeasureType  = eMTDeclination
				pObs.value.Unit   = "deg"
				pObs.value        = decDeg
				pObsSet.Add pObs


				If pObsSet.Count > 0 Then
					setColl.Add pObsSet
					numObsSets = numObsSets + 1
				End If

        	End If

		Loop

        GetObsSet = numObsSets

    End Function  ' GetObsSet

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

