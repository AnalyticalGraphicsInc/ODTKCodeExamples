<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  This WSC is designed to read French MONGE format     -->
<!--  ASCII tracking data files and pass the measurements  -->
<!--  in to AGI's Orbit Determination Tool Kit (ODTK).     -->
<!--                                                       -->
<!--  Author: Scott Reed, AGI                              -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="French MONGE Radar AzElRange Format"
    progid="WscVBS_MONGE_RADAR.wsc"
    version="1.00"
    classid="{E33F8347-A7BC-421c-96D0-B93028AD6ECD}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <!-- New method added to support ODTK 6.1.1 -->
   <method name="CloseFile"/>
</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3
    
    Const eCBF = 1
    Const ePosOnly = 0


    '-------------------------------------------------------------------------
	' Build satellite and station look up tables. Used to translate the ASCII
	' names into the equivalent numeric IDs
    '-------------------------------------------------------------------------

	Dim satelliteID, satellite
	Set satelliteID = CreateObject("Scripting.Dictionary")
	satelliteID.Add "FrenchSat",		1001

	Dim stationID, station
	Set stationID = CreateObject("Scripting.Dictionary")
	stationID.Add "ARMOR 2", 	103 

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
    
	Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

    '-------------------------------------------------------------------------
   	' Define shared variables
    '-------------------------------------------------------------------------
    Dim Xpos, Ypos, Zpos	
   
   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = False

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
    	dim line, stationName, satelliteName
    	
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

	    '-------------------------------------------------------------------------
		' Read header 
	    '-------------------------------------------------------------------------
		
		' set up initial values used to check if all the necessary data has been found
		
		station         = -1
		satellite       = -1

		' read the file until we run out of data or reach the beginning of the 
		' tracking data itself
		
		Do Until m_Stream.AtEndOfStream
			
			line = m_Stream.ReadLine
			
			' check for keyword value pairs
			
			'oRegExp.pattern = "^(\S+)\s+(\S+)"
			oRegExp.pattern = "^#\s+(\S+\s*\S*)\s*:\s+(\S+\s*\S*),\s*(\S+)\s*:\s*(\S+)"
			set oMatches = oRegExp.Execute(line)
						
			' found a pair, now figure out what it means
			
			if oMatches.Count = 1 then
			
				if oMatches(0).submatches(0) = "NOM RADAR" then

					stationName = oMatches(0).submatches(1)
					station = stationID.Item(stationName)
										
				end if
					
				if oMatches(0).submatches(2) = "SATELLITE" then

					satelliteName = oMatches(0).submatches(3)
					satellite = satelliteID.Item(satelliteName)
				
				end if
				
				' could probably read the atmospheric data as well to feed into
				' the troposphere model.
				
			    '-------------------------------------------------------------------------
				' check to see if we've found everything we need
			    '-------------------------------------------------------------------------

				if station <> -1 and satellite <> -1 then
					exit do
				end if
				
			end if
			
		loop
		
    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim date, line, year, month, day, time
        dim meas_type, numSets
        Dim value, units
        dim azvalue, elvalue, rangevalue, trackerlat, trackerlon, trackeralt
		
        numSets = 0
        pObsSet.Clear
    
        oRegExp.pattern = "(\d{3})-(\d{2}:\d{2}:\S+)\s+\|\s+(\S+)\s+\|\s+(\S+)\s+\|\s+(\S+)\s+\|\s+(\S+)\s+\|\s+(\S+)\s+\|\s+(\S+)"

        Do Until m_Stream.AtEndOfStream Or numSets > 0

            line = m_Stream.ReadLine
            
			' ***** parse measurement data *****
			' sample lines:
			'# ddd-hh:mm:ss.sss in UTC | Azi (deg) | Site (deg) | Range (km) | Lat_station (deg) | Lon_station (deg) | Alt_station (m)
			'07|MONGE
			'067-07:16:22.849 |   6.614 |  13.378 |  725.328 | 45.84490 |  -1.98249 |  1
			'067-07:16:22.917 |   6.504 |  13.354 |  724.860 | 45.84490 |  -1.98249 |  1
    		
            set oMatches = oRegExp.Execute(line)
            
            if oMatches.Count = 1 then
            	
            	' Right now the year is hardcoded since it doesn't seem to be in the data file
            	
            	year = 2007
            	day  = oMatches(0).submatches(0)
 				time = oMatches(0).submatches(1)
				azvalue = oMatches(0).submatches(2)
            	elvalue	= oMatches(0).submatches(3)
            	rangevalue = oMatches(0).submatches(4)
            	trackerlat = oMatches(0).submatches(5)
            	trackerlon = oMatches(0).submatches(6)
            	trackeralt = oMatches(0).submatches(7)
            	
				'-------------------------------------------------------------------------
				' Reassemble the date into a UTCJFOUR format.  This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------

				date =  day & "/" & year & " " & time
				
				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit = "UTCJFOUR"
				pObs.Date      = date
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, station  	' Facility must be first item
				pObs.TrackerIDs.Insert 1, satellite ' Satellite follows Facility

				'-------------------------------------------------------------------------
				'Set the position of the tracker
				'-------------------------------------------------------------------------
				
				ConvertLLA2ECEF trackerlat, trackerlon, trackeralt
			
				pObs.TrackerVector.CoordSystem = eCBF
				pObs.TrackerVector.ElmType = ePosOnly
				pObs.TrackerVector.X.Unit = "m" 
				pObs.TrackerVector.X.Value = Xpos 
				pObs.TrackerVector.Y.Unit = "m"
				pObs.TrackerVector.Y.Value = Ypos 
				pObs.TrackerVector.Z.Unit = "m"
				pObs.TrackerVector.Z.Value = Zpos 
				pObsSet.Add pObs 

				'-------------------------------------------------------------------------
				'azimuth
				'-------------------------------------------------------------------------

				'-------------------------------------------------------------------------
				' Since this is the first measurement in the obs set, we need to 
				' initialize the obs set.
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "UTCJFOUR"
				pObsSet.Date      = date

				pObs.MeasureType	= eMTAzimuth
				pObs.Value.Unit		= "deg"
				pObs.Value.Value	= azvalue
				pObsSet.Add pObs
					
				'-------------------------------------------------------------------------
				'elevation
				'-------------------------------------------------------------------------
				
				'-------------------------------------------------------------------------
				' The elevation is assumed to be part of the same observation set as the
				' previous azimuth measurement.
				'-------------------------------------------------------------------------

				pObs.MeasureType	= eMTElevation
				pObs.Value.Unit		= "deg"
				pObs.Value.Value	= elvalue
				pObsSet.Add pObs
					
				'-------------------------------------------------------------------------
				'range
				'-------------------------------------------------------------------------
								
				'-------------------------------------------------------------------------
				' The elevation is assumed to be part of the same observation set as the
				' previous azimuth measurement.
				'-------------------------------------------------------------------------

				pObs.MeasureType	= eMTRange
				pObs.Value.Unit		= "km"
				pObs.Value.Value	= rangevalue
				pObsSet.Add pObs

				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				numSets = numSets + 1
				setColl.Add pObsSet
							
        	End If
		Loop
				
        GetObsSet = numSets
        		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function


	'-------------------------------------------------------------------------
	' CloseFile method
	'-------------------------------------------------------------------------

	Function CloseFile()

		If m_sFileName <> "" Then
			m_Stream.Close()
			m_sFileName = ""
		End If

	End Function


    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function
    
    '-------------------------------------------------------------------------
    ' ConvertLLA2ECEF method
    '-------------------------------------------------------------------------

    Sub ConvertLLA2ECEF(lat, lon, alt)
    
    	Dim pi, a, esquared, chi
    	pi = 3.1415926535897932384626433832795
    	a = 6378137.0 'meters WGS84 parameters
    	esquared = 6.69437999014e-3 'WGS84 parameters
    	
    	lat = lat * pi / 180.0
    	lon = lon * pi / 180.0
    	
    	chi = sqr(1-(esquared*(sin(lat))^2))
    	
    	Xpos = ((a/chi)+alt)*cos(lat)*cos(lon)
    	Ypos = ((a/chi)+alt)*cos(lat)*sin(lon)
    	Zpos = (((a*(1-esquared))/chi)+alt)*sin(lat)
    	    	
    End Sub
]]>
</script>

</component>

