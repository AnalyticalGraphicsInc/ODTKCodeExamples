<?xml version="1.0"?>

<!-- ============================================= -->
<!--  This WSC will read a Track file in MELCOs    -->
<!--  custom tracking data format                  -->
<!--                                               -->
<!--  author: jens ramrath, agi                    -->
<!--  date: 27 jul 2011                            -->
<!-- ============================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="read custom tracking format"
    progid="TrkData.MELCO.OD6.wsc"
    version="1.00"
    classid="{B2B2E4C5-CD02-4a48-A681-8C3B8DA404B7}">
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTNPRange		  = 4
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    Const eMTGPSNav_C1		  = 81
    Const eMTEphPos           = 151

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3
    
    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()
    	Dim line

        Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			

        
		' ******************
		' ***** header *****
		' ******************
		' sample header:
		'	[TRACKING_HEADER]
		'	TRACKING_DATA_TYPE          =One_Station                 ; Tracking Data Type (One_Station/Two_Station)
		'	SATELLITE_NAME              =SATELLITEA                  ; Satellite Name
		'	SATELLITE_ID                =0800101                     ; Satellite ID
		'	GROUND_STATION_NAME         =STATION1                    ; Ground Station Name
		'	GROUND_STATION_ID           =9101                        ; Ground Station ID
		'	GROUND_ROUTE_ID             =0                           ; Ground Route ID
		'	GROUND_TIME_DELAY           =0.0000000                   ; Ground Time Delay(m)
		'	RANGE_CALIBRATION           =1                           ; Range Calibration (1:ON/0:OFF)
		'	START_TIME                  =2008/12/04/00:00:00.000     ; Data Start Time
		'	END_TIME                    =2008/12/04/00:10:00.000     ; Data End Time
		'	DATA_COUNT                  =21                          ; Tracking Data Count		

        Do Until m_Stream.AtEndOfStream or line = "[TRACKING_DATA]"
            line = trim(m_Stream.ReadLine)


			' SATELLITE_ID
			if left(line, 12) = "SATELLITE_ID" then
				oRegExp.pattern = "\S+\s+\=(\S+).*"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count = 1 then
					satelliteID = oMatches(0).submatches(0)
				end if
			end if


			' GROUND_STATION_ID
			if left(line, 17) = "GROUND_STATION_ID" then
				oRegExp.pattern = "\S+\s+\=(\S+).*"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count = 1 then
					stationID = oMatches(0).submatches(0)
				end if
			end if
		Loop        

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

	Dim fileType
    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal
        
        Dim filePathSplit, fileNameSplit
		filePathSplit = split(m_sFileName, "\")
        
        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If
        
        Reset()

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------
	Dim satelliteID, stationID


    Function GetObsSet(setColl)
		' ***************************
		' ***** some init stuff *****
		' ***************************
		
        Dim date, line, numSets
		
        numSets = 0
    
    	Dim debug
    	debug = 0

		Dim az, el, range, doppler

		



		' ****************
		' ***** data *****
		' ****************
		' sample data
		'	[TRACKING_DATA]
		'	Time(UTC),Range(km),Azimuth(deg),Elevation(deg),Range Rate(km/s)
		'	2008/12/04/00:00:00.000,37234.755262489200000,173.908392831430000,47.359647016091800,-0.000182166979080
		'	2008/12/04/00:00:30.000,37234.752128665700000,173.951355499338000,47.533223846121400,-0.000182058699730
		'	2008/12/04/00:01:00.000,37234.742621421400000,174.161810136642000,47.601160165870100,-0.000182122888210			
		
		Do Until m_Stream.AtEndOfStream or numSets > 0
			line = trim(m_Stream.ReadLine)


			' check if this line matches data format
			oRegExp.pattern = "(\S{4})/(\S{2})/(\S{2})/(\S{2}):(\S{2}):(\S+),.+"
			oRegExp.global = false
			set oMatches = oRegExp.Execute(line)
			
			if oMatches.Count = 1 then
				Dim splitData
				splitData = split(line, ",")


				date	= splitData(0)
				range	= splitData(1)
				az		= splitData(2)
				el		= splitData(3)
				doppler = splitData(4)


				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------
				pObsSet.Clear()
				pObsSet.Date.unit = "YYYY/MM/DD"
				pObsSet.Date      = date


				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------
				pObs.Date.unit = "YYYY/MM/DD"
				pObs.Date      = date
				pObs.TimeOrigin = eGroundReceiveTime


				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, stationID		' Facility must be first item
				pObs.TrackerIDs.Insert 1, satelliteID 	' Satellite follows Facility

				' AZ
				pObs.MeasureType		= eMTAzimuth
				pObs.Value.Unit			= "deg"
				pObs.Value.Value		= az
				pObsSet.Add pObs

				' EL
				pObs.MeasureType		= eMTElevation
				pObs.Value.Unit			= "deg"
				pObs.Value.Value		= el
				pObsSet.Add pObs

				' RANGE
				pObs.MeasureType		= eMTRange
				pObs.Value.Unit			= "km"
				pObs.Value.Value		= range
				pObsSet.Add pObs

				' DOPPLER
				pObs.MeasureType		= eMTDoppler
				pObs.Value.Unit			= "km*sec^-1"
				pObs.Value.Value		= doppler
				pObsSet.Add pObs

				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & stationID & " to " & satelliteID)
				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------
				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
									
        	End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

