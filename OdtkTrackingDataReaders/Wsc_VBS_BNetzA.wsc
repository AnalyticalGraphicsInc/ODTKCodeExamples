<?xml version="1.0"?>

<!-- this script reads BundesNetzAgentur az/el tracking data into ODTK -->
<!-- author: jens ramrath                                			   -->
<!-- date: 29 apr 2019                                   			   -->


<component>

<?component error="true" debug="true"?>

<registration
    description="Harris 3L doppler format"
    progid="Wsc_VBS_BNetzA.wsc"
    version="1.00"
    classid="{5C43B379-6930-4CE7-BBA2-CA739E3B3BE6}">
</registration>

<public>
   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="CloseFile"/>
   
   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[
    
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMT1WBistaticRange  = 3
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    
    Const eMT3LDoppler        = 105

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    Const eMTGround_TDOA      =  133   
    Const eMTGround_FDOA      =  134 

    '-------------------------------------------------------------------------
    ' define some global variables we'll be using
    '-------------------------------------------------------------------------
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)
    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
    ' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
    dim oRegExp, oMatches, oMatch
    
    Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
    ' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    Dim satellite
    
    Function GetFileName()

       GetFileName = m_sFileName      

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------
    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------
    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------
    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------
    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)
        End If

    End Function

    '-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------
    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If
        
    End Function
    
    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------
    Function GetObsSet(setColl)

		dim date, time, nSec, dateTime, azimuth, elevation
		dim stationTxID, satelliteID, stationRxID, SatellteTranspID
		
        dim line, station
        dim deltaRng, deltaRngRate, sen1, sen2, numsets, meas_type, freq, emitter
        
        numSets = 0
        pObsSet.Clear
        
        
        Do Until m_Stream.AtEndOfStream Or numSets > 0

            line = m_Stream.ReadLine
            
            '-------------------------------------------------------------------------
            ' parse the data (see sample below)
			'			
			' Date;Day, Time; Julian-date; Azimuth;Elevation; Orbital Position; Orbital Devation
			' 2019-04-15;105, 09:56:29;35789481;328.496;26.928;-146.4987;69.0796
			' 2019-04-15;105, 09:56:30;35790687;328.495;26.928;-146.4987;69.0796
			' 2019-04-15;105, 09:56:31;35791491;328.495;26.928;-146.4987;69.0794
            '-------------------------------------------------------------------------

			' throw out header
			if left(Trim(line), 4) <> "Date" then
				Dim lineSplit
				lineSplit = Split(line, ";")

				date = Trim(Replace(lineSplit(0), "-", "/"))		' Date
				time = Trim(Split(lineSplit(1), ",")(1))			' Time
				
			   	milliSecDay = Trim(lineSplit(2))
			   	Dim hr, hrDec
			   	Dim min, minDec
			   	Dim sec, secDec, milliSec
			   	hrDec = (millisecDay/1000/60/60)
			   	hr = Split(hrDec, ".")(0)
			   	minDec =  (hrDec - hr)* 60
			   	min = Split(minDec, ".")(0)
			   	secDec = (minDec - min) * 60
			   	sec = Split(secDec, ".")(0)
			   	milliSec = Split(secDec, ".")(1)
			   	dateTime = dateVar & " " & timeVar & "." & milliSec		' DateTime (YYYY/MM/DD)

				azimuth = lineSplit(3)
				elevation = lineSplit(4)

				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------
				pObsSet.Clear()
				pObsSet.Date.unit = "YYYY/MM/DD"
				pObsSet.Date      = dateTime

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------
				pObs.Date.unit  = "YYYY/MM/DD"
				pObs.Date       = dateTime
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()

				pObs.TrackerIDs.Insert 0, 100
				pObs.TrackerIDs.Insert 1, 1000

				pObs.MeasureType  = eMTAzimuth
				pObs.value.Unit   = "deg"
				pObs.value        = azimuth
				pObsSet.Add pObs

				pObs.MeasureType  = eMTElevation
				pObs.value.Unit   = "deg"
				pObs.value        = elevation
				pObsSet.Add pObs

				
				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------
				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If

			 end if		' ignore comment
            
        Loop
        
        GetObsSet = numSets

    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
        Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
        Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

