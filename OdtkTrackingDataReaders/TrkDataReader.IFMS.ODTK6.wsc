<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  ODTK data reader for IFMS formatted measurements     -->
<!--                                                       -->
<!--  author: jens ramrath, 13 jan 2014                    -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="IFMS Format reader"
    progid="TrkDataReader.IFMS.ODTK6.wsc"
    version="1.00"
    classid="{42D6DC61-0E69-46da-B95D-03DA126305CA}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

  <method name="CloseFile"/>

  <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[

    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------

    Dim m_sfileSysObj, m_Stream, m_sFileName, m_Satellite, m_Facility, m_MeasType

    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")

    m_sFileName = ""

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------

    dim oRegExp, oMatches, oMatch

	Set oRegExp = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------

    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar

    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

	'-------------------------------------------------------------------------
	' Define look up tables to translate names to ID numbers
    '-------------------------------------------------------------------------

	Dim satIDs
	Set satIDs = CreateObject("Scripting.Dictionary")
	satIDs.Add "XMM_", "1001" 


	Dim facIDs
	Set facIDs = CreateObject("Scripting.Dictionary")
	facIDs.Add "KO11", "501"
	facIDs.Add "PR11", "502"
	facIDs.Add "PR12", "503"

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------

    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then

            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False

        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
		dim line

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)
        Else
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)

			' ************************
			' ***** READ HEADER ******
			' ************************

			' ***** Find station_id *****
			m_Facility      = ""
			oRegExp.pattern = "<station_id>\s+(\S+)\s+</station_id>"
			
			Do Until m_Stream.AtEndOfStream
			
				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' If we found the satellite ID then we are done.

				if oMatches.Count = 1 then
					m_Facility = facIDs.Item(oMatches(0).submatches(0))
					exit do
				end if
			loop
			

			' ***** Find spacecraft_id *****
			m_Satellite     = ""
			oRegExp.pattern = "<spacecraft_id>\s+(\S+)\s+</spacecraft_id>"

			Do Until m_Stream.AtEndOfStream

				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' If we found the satellite ID then we are done.

				if oMatches.Count = 1 then
					m_Satellite = satIDs.Item(oMatches(0).submatches(0))
					exit do
				end if
			loop


			' ***** Find dap_type *****
			m_MeasType      = ""
			oRegExp.pattern = "<dap_type>\s+(\S+)\s+</dap_type>"

			Do Until m_Stream.AtEndOfStream

				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' If we found the satellite ID then we are done.
				if oMatches.Count = 1 then
					m_MeasType = oMatches(0).submatches(0)
					exit do
				end if
			loop

		End If
    End Function

	'-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

        dim measNum, dateTime, intervalCount, carrierPhase, spurious, deltaDelay, carrLoopStatus
        dim delay, code, kd1
        dim line, prevDateTime, prevCarrierPhase, prevDeltaDelay
        dim antenna, numObsSets

		prevDateTime 		= ""
		prevCarrierPhase	= ""
		prevDeltaDelay		= ""

		pObsSet.Clear()
		numObsSets = 0

		' Note that we are going to process the entire file of data and return ALL
		' measurements.  We sort of have to because we need to be checking all the
		' time tags to identify obs sets.

		'-------------------------------------------------------------------------
		' parse the line (see sample below)
		' 
		' <body_Doppler>
		' // Number  SampleTime                  IntervalCount                 CarrierPhase  Spurious              DeltaDelay CarrLoopStatus      
		'         1  20131013.231502.000           99946303624             1615085993.46160  No                             0 Locked              
		'         2  20131013.231503.000           99963803624             1615385381.25110  No             4.31661240106e-06 Locked              
		'         3  20131013.231504.000           99981303624             1615684769.44180  No            8.633134649205e-06 Locked              
		'
		'-------------------------------------------------------------------------
		
		' *******************
		' ***** DOPPLER *****
		' *******************
		' RangeRate = (deltadelay_i - deltadelay_i-1)*c/timediff 
		
		Select Case m_MeasType
			case "D1", "D2"
		
			oRegExp.pattern  = "\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
			
			Dim pastBody_Doppler
			pastBody_Doppler = false
			
			Do Until m_Stream.AtEndOfStream

				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' in case something in the header matches the regex
				if Trim(line) = "<body_Doppler>" then
					pastBody_Doppler = true
				end if

				if oMatches.Count = 1 AND pastBody_Doppler AND Left(Trim(line), 2) <> "//" then

					measNum     	= oMatches(0).submatches(0)
					dateTime    	= oMatches(0).submatches(1)
					intervalCount	= oMatches(0).submatches(2)
					carrierPhase	= oMatches(0).submatches(3)
					spurious		= oMatches(0).submatches(4)
					deltaDelay		= oMatches(0).submatches(5)
					carrLoopStatus	= oMatches(0).submatches(6)

					' convert date to "YYYY:MM:DD" format
					dateTime = DateTime2STKFormat(dateTime)
					
					if prevDateTime <> "" then
						
						pObsSet.Clear()
						pObsSet.Date.unit = "YYYY:MM:DD"
						pObsSet.Date      = dateTime

						'-------------------------------------------------------------------------
						' Initialize observation
						'-------------------------------------------------------------------------

						pObs.Date.unit  = "YYYY:MM:DD"
						pObs.Date       = dateTime
						pObs.TimeOrigin = eGroundReceiveTime

						'-------------------------------------------------------------------------
						' Set up facility and satellite IDs. Facility must come first for 2-way ranging.
						'-------------------------------------------------------------------------

						pObs.TrackerIDs.Clear()
						pObs.TrackerIDs.Insert 0, m_Facility	' Facility must be first item
						pObs.TrackerIDs.Insert 1, m_Satellite	' Satellite follows Facility


						' *** compute doppler ***
						Dim dTimeSec
						dTimeSec = TimeDiff(prevDateTime, dateTime)
						
						Dim dPhase
						dPhase = carrierPhase - prevCarrierPhase
						
						Dim dDeltaDelay
						dDeltaDelay = deltaDelay - prevDeltaDelay

					
						Dim c
						c = 299792458.0		' speed of light (m/s)
						
						Dim doppler
						doppler = dDeltaDelay * c / dTimeSec

						pObs.MeasureType  = eMTDoppler
						pObs.value.Unit   = "m/sec"
						pObs.value        = doppler
						pObs.Doppler_Dt	  = dTimeSec
						pObsSet.Add pObs

						If pObsSet.Count > 0 Then
							setColl.Add pObsSet
							numObsSets = numObsSets + 1
						End If
					end if

					prevDateTime = dateTime
					prevCarrierPhase = carrierPhase
					prevDeltaDelay = deltaDelay

				End If

			Loop
			
			
		
		' *******************
		' ***** DOPPLER *****
		' *******************
		' sample:
		' <body_Ranging>
		' // Number  SampleTime                          Delay  Code  AmbF  SpCF  SpTF  CorF                  KD-1  RecF             ToneLevel             CodeLevel            PhaseError            ToneLoopSN          DownModIndex
		'        22  20131013.231523.000    8.792879548268e-07     0  No    No    No    Yes    -4.622872656013e-06  Yes                  -21.0                 0.000                 0.000        46.20659450546                 0.177
		'        23  20131013.231524.000    3.478826502976e-07     0  No    No    No    Yes    -4.314742430456e-06  Yes                  -21.1                 0.000                 0.000        46.80659450546                 0.177
		'        24  20131013.231525.000    1.347422160521e-06     1  No    No    No    Yes    -4.314742430456e-06  Yes                  -19.6                 0.000                 0.000        48.30659450546                 0.207
		'        25  20131013.231526.000     8.09409800515e-07     1  No    No    No    Yes    -4.314647693127e-06  Yes                  -20.6                 0.000                 0.000        46.50659450546                 0.185

		case "RGXXXXX"
			oRegExp.pattern  = "\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
			
			Dim pastBody_Ranging
			pastBody_Ranging = false
			
			Do Until m_Stream.AtEndOfStream

				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' in case something in the header matches the regex
				if Trim(line) = "<body_Ranging>" then
					pastBody_Ranging = true
				end if

				if oMatches.Count = 1 AND pastBody_Ranging AND Left(Trim(line), 2) <> "//" then

					measNum     	= oMatches(0).submatches(0)
					dateTime    	= oMatches(0).submatches(1)
					delay			= oMatches(0).submatches(2)
					code			= oMatches(0).submatches(3)
					kd1				= oMatches(0).submatches(8)

					' convert date to "YYYY:MM:DD" format
					dateTime = DateTime2STKFormat(dateTime)

					
					pObsSet.Clear()
					pObsSet.Date.unit = "YYYY:MM:DD"
					pObsSet.Date      = dateTime

					'-------------------------------------------------------------------------
					' Initialize observation
					'-------------------------------------------------------------------------

					pObs.Date.unit  = "YYYY:MM:DD"
					pObs.Date       = dateTime
					pObs.TimeOrigin = eGroundReceiveTime

					'-------------------------------------------------------------------------
					' Set up facility and satellite IDs. Facility must come first for 2-way ranging.
					'-------------------------------------------------------------------------

					pObs.TrackerIDs.Clear()
					pObs.TrackerIDs.Insert 0, m_Facility	' Facility must be first item
					pObs.TrackerIDs.Insert 1, m_Satellite	' Satellite follows Facility


					' *** compute range ***
					Dim range
					range = kd1 * 299792458.0		' kd1 * speed of light

					pObs.MeasureType  = eMTRange
					pObs.value.Unit   = "km"
					pObs.value        = range
					pObsSet.Add pObs

					If pObsSet.Count > 0 Then
						setColl.Add pObsSet
						numObsSets = numObsSets + 1
					End If

				End If

			Loop
		
		End Select

        GetObsSet = numObsSets

    End Function  ' GetObsSet

    
    
    
    
    
    ' ****************************
    ' ***** Timing functions *****
    ' ****************************
    Function DateTime2STKFormat(dateTime)
    	Dim y, m, d, h, n, s
    	y = Mid(dateTime, 1, 4)
    	m = Mid(dateTime, 5, 2)
    	d = Mid(dateTime, 7, 2)
    	h = Mid(dateTime, 10, 2)
    	n = Mid(dateTime, 12, 2)
    	s = Mid(dateTime, 14)

    	DateTime2STKFormat = y & ":" & m & ":" & d & ":" & h & ":" & n & ":" & s
    End Function
    
    
    Function TimeDiff(dateTime1, dateTime2)
		' expects input times in 2014:01:14:10:49:12.345 format
		' a positive TimeDiff is returned when time1 < time2
		
		Dim t1split, t2split
		t1split = Split(dateTime1, ":")
		t2split = Split(dateTime2, ":")
		
		Dim d1, d2
		d1 = CDate(t1split(2) & "/" & t1split(1) & "/" & t1split(0) & " " & Mid(dateTime1, 12, 8))
		d2 = CDate(t2split(2) & "/" & t2split(1) & "/" & t2split(0) & " " & Mid(dateTime2, 12, 8))
		
		Dim mSecSplit1, mSecSplit2
		mSecSplit1 = Split(dateTime1, ".")
		mSecSplit2 = Split(dateTime2, ".")
		
		Dim mSecDiff
		mSecDiff = mSecSplit2(1)/1000 - mSecSplit1(1)/1000
		
    	TimeDiff = DateDiff("s", d1, d2) + mSecDiff
    
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

