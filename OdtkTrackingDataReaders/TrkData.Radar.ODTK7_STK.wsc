<?xml version="1.0"?>

<!-- 
this reader will load "measurements" from STK

The expected input file is a CSV with 
facility_ID,101
satellite_ID,1001

followed by the data in columns:

Time (UTCG)
Range (km)
Azimuth (deg) (optional)
Elevation (deg) (optional)
Doppler (km/s) (optional)
Example csv file from STK:

example:

facility_ID,101
satellite_ID,1001
"Time (UTCG)","Range (km)","Azimuth (deg)","Elevation (deg)"
28 Jul 2023 06:59:40.662,2593.874436,339.358,-0.000
28 Jul 2023 07:00:00.000,2497.994706,341.497,0.875

-->

<component>

<?component error="true" debug="true"?>

<registration
    description="reads radar files"
    progid="TrkData.Radar.ODTK7_STK.wsc"
    version="1.00"
    classid="{A7ADB6BB-DE45-4B93-A4BB-E540B6397D77}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>
   
   <!-- New method added to support ODTK 6.1.1 -->
   <method name="CloseFile"/>

</public>

<script language="VBScript">
<![CDATA[
	
	'-------------------------------------------------------------------------
	' Member variables
	'-------------------------------------------------------------------------

	Option explicit

	Const ForReading   = 1
	Const ForWriting   = 2

	Const eMTRange                 = 1
	Const eMTDoppler               = 2
	Const eMTAzimuth               = 11
	Const eMTElevation             = 12
	
	Const eGroundReceiveTime     = 0
	Const eSatelliteTransmitTime = 1
	Const eGroundTransmitTime    = 2
	Const eSatelliteReceiveTime  = 3

	Const eDefaultEquinoxType	    = -1
	Const eMeanEquatorAndEquinox	= 0
	Const eTrueEquatorAndEquinox	= 1
	Const eTrueEquatorMeanEquinox	= 2
	Const eICRFEquinoxType		    = 3

	Const eDefaultEquinoxEpoch	= -1
	Const eJ2000Epoch			= 0
	Const eB1950Epoch			= 1
	Const eOfDate				= 2
	Const eYearOfObsJan0		= 3
	Const eDayOfObs				= 4

	'-------------------------------------------------------------------------
	' define some global variables we'll be using
	'-------------------------------------------------------------------------

	Dim m_sfileSysObj, m_Stream, m_sFileName

	Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")

	m_sFileName       = ""

	'-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
	'-------------------------------------------------------------------------

	Dim version
	version = "7.0"

	Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
	versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
	GetRegKey(versionStr)

	ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
	Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

	Dim pObsSet
	ObjectStr = textFile.ReadLine
	Set pObsSet = CreateObject(ObjectStr)
	

	Dim pObs
	Dim pObsUnitless	
	ObjectStr = textFile.ReadLine
	Set pObs = CreateObject(ObjectStr)
	Set pObsUnitless = CreateObject(ObjectStr)
	
	Dim facID, satID
	'-------------------------------------------------------------------------
	' Function GetFileName()
	'-------------------------------------------------------------------------

	Function GetFileName()

	   GetFileName = m_sFileName

	End Function

	'-------------------------------------------------------------------------
	' SupportsSave property [read-only]
	'-------------------------------------------------------------------------

	Function GetSupportsSave()

	   GetSupportsSave = false

	End Function

	'-------------------------------------------------------------------------
	' SupportsMultipleTrackers property [read-only]
	'-------------------------------------------------------------------------

	Function GetSupportsMultipleTrackers()

	   GetSupportsMultipleTrackers = True

	End Function

	'-------------------------------------------------------------------------
	' Reset method
	'-------------------------------------------------------------------------

	Function Reset()

		if m_sFileName <> "" Then

			Dim newVal
			newVal = m_sFileName
			OpenFile newVal, False

		End if

	End Function

	'-------------------------------------------------------------------------
	' OpenFile method
	'-------------------------------------------------------------------------

	Function OpenFile(newVal, newFile)

		If m_sFileName <> "" Then
			m_Stream.Close
			m_sFileName = ""
		End If

		m_sFileName = newVal

		If newFile Then        
			Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
		Else        
			Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
		End If

	End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
		Dim line, numSets,linCnt
		Dim splitData, dateTime
		Dim range, doppler, azimuth, elevation
		Dim rangeWn, dopplerWn, azimuthWn, elevationWn

		numSets = 0
        pObsSet.Clear
        

		Dim debug
		debug = 0
		linCnt = 0


		' ***** read data *****
		Do Until m_Stream.AtEndOfStream 
					'or numSets > 0

			' ***** parse measurement data *****
			line = m_Stream.ReadLine
			
			linCnt = linCnt + 1
			
			' remove extra spaces
			line = Replace(line, vbTab, " ")
			Dim i
			for i = 0 to 10
				line = Replace(line, "  ", " ")
			next
			
    		splitData = split(line, ",")
    		
			if linCnt = 1 then
				facID       = Trim(splitData(1))		
			End if
			
			if linCnt = 2 then
				satID       = Trim(splitData(1))			
			End if
			

			' skip empty lines and header
			if UBound(splitData) > 1 and InStr(line, "Range") = 0 and linCnt > 3 then
				
				Dim useWn
				useWn = False
				
				if UBound(splitData) > 4 then
					useWn = True
					rangeWn     = Sqr(CDbl(Trim(splitData(5))))
					azimuthWn   = Sqr(CDbl(Trim(splitData(6))))
					elevationWn = Sqr(CDbl(Trim(splitData(7))))
					dopplerWn   = Sqr(CDbl(Trim(splitData(8))))
				End if
				
				dateTime    = Trim(splitData(0))
				
				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------
				pObsSet.Clear()
				pObsSet.Date.Unit	= "UTCG"
				pObsSet.Date.Value	= dateTime

				pObs.Date.Unit	= "UTCG"
				pObs.Date.Value	= dateTime
				pObs.TimeOrigin	= eSatelliteTransmitTime
				
				' specify tracker and trackee. IF navsol then don't sepcify satID
				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, facID
				pObs.TrackerIDs.Insert 1, satID
				
				if UBound(splitData) > 0 then
					range       = Trim(splitData(1))
					' ***** RANGE *****
					pObs.MeasureType	= eMTRange
					pObs.Value.Unit		= "km"
					pObs.Value.Value	= range

					' check for white noise sigma
					if useWn then
						pObs.WNSigma.Unit  = "km"
						pObs.WNSigma.Value = rangeWn
					end if

					pObsSet.Add pObs
				End if
				
				if UBound(splitData) > 1 then
					azimuth     = Trim(splitData(2))
					' ***** AZIMUTH *****
					pObs.MeasureType	= eMTAzimuth
					pObs.Value.Unit		= "deg"
					pObs.Value.Value	= azimuth

					' check for white noise sigma
					if useWn then
						pObs.WNSigma.Unit  = "deg"
						pObs.WNSigma.Value = azimuthWn
					end if

					pObsSet.Add pObs


				End if
				
				
				if UBound(splitData) > 2 then
					elevation   = Trim(splitData(3))
					' ***** ELEVATION *****
					pObs.MeasureType	= eMTElevation
					pObs.Value.Unit		= "deg"
					pObs.Value.Value	= elevation

					' check for white noise sigma
					if useWn then
						pObs.WNSigma.Unit  = "deg"
						pObs.WNSigma.Value = elevationWn
					end if

					pObsSet.Add pObs
				End if


				' ***** DOPPLER *****				
				if UBound(splitData) > 3 then
					doppler     = Trim(splitData(4))
					
					pObs.MeasureType	= eMTDoppler

					pObs.Value.Unit		= "km/sec"
					pObs.Value.Value	= doppler

					' check for white noise sigma
					if useWn then
						pObs.WNSigma.Unit  = "km/sec"
						pObs.WNSigma.Value = dopplerWn
					end if

					pObsSet.Add pObs
				End if
				


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
			End if
		Loop

        GetObsSet = numSets

		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)

        Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets

    End Function


	'-------------------------------------------------------------------------
	' CloseFile method
	'-------------------------------------------------------------------------

	Function CloseFile()

		If m_sFileName <> "" Then
			m_Stream.Close()
			m_sFileName = ""
		End If

	End Function


    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

	Function SaveObs(pEnum, bAppend)
		
        nObsSaved = 0
        facID = 0
        satID = 0

		bAtEnd = pEnum.AtEnd

        SaveObs = nObsSaved
	End Function


	Function GetRegKey (regKey)
		Dim objShell
		Set objShell = CreateObject("WScript.Shell")
		regValue = objShell.RegRead(regKey)
		Set objShell = nothing
	End Function

]]>
</script>

</component>
