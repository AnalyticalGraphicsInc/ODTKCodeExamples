<?xml version="1.0"?>

<!-- ============================================= -->
<!--  This WSC is designed to read space based     -->
<!--  .lance tracking data files                   -->
<!--                                               -->
<!--  author: jens ramrath                         -->
<!--  date: 15 apr 2009                             -->
<!-- ============================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="STK fixed ephemeris file format"
    progid="TrkData.SBLance.VBScript.wsc"
    version="1.00"
    classid="{809C771E-82FA-4f02-B686-67B7B1B7601A}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <!-- New method added to support ODTK 6.1.1 -->
   <method name="CloseFile"/>
</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    
    Const eMTGPSNav_C1		  = 81

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3
    
    Const eXComp	= 0
    Const eYComp	= 1
    Const eZComp	= 2

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp

    dim oRegExpSub, oMatchesSub, oMatchSub
	Set oRegExpSub = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "5.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim date, line, year, month, day, hour, min, sec, station, satellite
        dim measType, az, el, range, rangeRate, rest, err, numSets


        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0

		
		line = "null"

		' *********************
		' ***** read data *****
		' *********************
		Dim front, time, data1, data2, data3, data4, measure, obsType, satID
		
        Do Until m_Stream.AtEndOfStream   ' Or numSets > 0

            line = m_Stream.ReadLine
            

			' ***** parse measurement data *****
			' sample lines:
			' 101 15 425 0 0 0.121274 223.25487 63.49036 119281824.73 0.2522
			' 102 15 425 0 0 0.131378 100.55457 21.69004 129219311.59 0.2522
			' 101 15 425 0 1 0.121275 223.23305 63.47833 119283059.25 0.2522
			' 101 15 425 0 2 0.121277 223.21365 63.46503 119284310.54 0.2522
			' 101 15 425 0 3 0.121278 223.19288 63.45952 119285576.41 0.2522
			' 101 15 425 0 4 0.121279 223.17572 63.45163 119286850.73 0.2522


			' 1-3	Sensor ID, right adjusted
			' 4-6	Blank
			' 7-8	Year
			' 9-10	Month
			' 11-12	Day
			' 13-14	Hour
			' 15-16	Minute
			' 17-25	Second (F9.6 format)
			' 26	Observation type
			' 		0  Azimuth, Elevation, Range, Range rate
			'		1  Pseudo-range, GPS range
			' 27-35	Azimuth (deg)
			' 36-37	Blank
			' 38   	Azimuth validity flag (blank if valid data)
			' 39-47	Elevation (deg)
			' 48-49	Blank
			' 50	Elevation validity flag (blank if valid data)
			' 51-63	Range (feet)
			' 64-65	Blank
			' 66	Range validity flag (blank if valid data)
			' 67-77	Range rate
			' 78-79	Blank
			' 80	Range rate validity flag (blank if valid data)

 
  		
			oRegExp.pattern = "(\S+)\s+(..)(..)(..)(..)(..)(.........)(.)(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
			oRegExp.global = false
			set oMatches = oRegExp.Execute(line)


			if oMatches.Count = 1 then

				satID		= trim(oMatches(0).submatches(0))
				year		= trim(oMatches(0).submatches(1))
				month		= trim(oMatches(0).submatches(2))
				day			= trim(oMatches(0).submatches(3))
				hour		= trim(oMatches(0).submatches(4))
				min			= trim(oMatches(0).submatches(5))
				sec			= trim(oMatches(0).submatches(6))
				obsType		= trim(oMatches(0).submatches(7))
				data1		= trim(oMatches(0).submatches(8))
				data2		= trim(oMatches(0).submatches(9))
				data3		= trim(oMatches(0).submatches(10))
				data4		= trim(oMatches(0).submatches(11))


				'-------------------------------------------------------------------------
				' Reassemble the date into a YYYY/MM/DD format. This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------

				if year < 500 then
					year = year + 2000
				end if

				date = year & "/" & month & "/" & day & " " & hour & ":" & min & ":" & sec


				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "YYYY/MM/DD"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit = "YYYY/MM/DD"
				pObs.Date      = date
				pObs.TimeOrigin = eSatelliteReceiveTime



				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, satID  	' tracker
				pObs.TrackerIDs.Insert 1, 501		' trackee

				
				' sb azimuth
				pObs.MeasureType	= eMTSBAzimuth
				pObs.Value.Unit		= "deg"
				pObs.Value.Value	= data1
				pObsSet.Add pObs
				
				' sb elevation
				pObs.MeasureType	= eMTSBElevation
				pObs.Value.Unit		= "deg"
				pObs.Value.Value	= data2
				pObsSet.Add pObs
				
				' sb range
				pObs.MeasureType	= eMTSBRange
				pObs.Value.Unit		= "ft"
				pObs.Value.Value	= data3
				pObsSet.Add pObs
				
				' sb range rate
				' not supported as of ODTK5.1.4
				

				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13) & Chr(10)) & "az: " & data1 & (Chr(13) & Chr(10)) & "el: " & data2 & (Chr(13) & Chr(10)) & "range: " & data3 & (Chr(13) & Chr(10)) & "rangeRate: " & data4)
				end if





				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
					
        	End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

	'-------------------------------------------------------------------------
	' CloseFile method
	'-------------------------------------------------------------------------

	Function CloseFile()

		If m_sFileName <> "" Then
			m_Stream.Close()
			m_sFileName = ""
		End If

	End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

