<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  This file sets up the ODTK reader for SHAR           -->
<!--                                                       -->
<!--  author: jens ramrath, 29 jan 2016                    -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="SHAR Format"
    progid="TrkDataReader.SHAR.ODTK6.wsc"
    version="1.00"
    classid="{13EBA63B-F676-4574-A54B-3C2F974883A9}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

  <method name="CloseFile"/>

  <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

</public>

<script language="VBScript">
<![CDATA[

    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------

    Dim m_sfileSysObj, m_Stream, m_sFileName, m_Satellite, m_Station

    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")

    m_sFileName = ""

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------

    dim oRegExp, oMatches, oMatch

	Set oRegExp = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------

    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar

    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

	'-------------------------------------------------------------------------
	' Define look up tables to translate names to ID numbers
    '-------------------------------------------------------------------------

	Dim satIDs
	Set satIDs = CreateObject("Scripting.Dictionary")
	satIDs.Add "SK4A", "1001" 
	satIDs.Add "SK4C", "1002"

      		

	Dim facIDs
	Set facIDs = CreateObject("Scripting.Dictionary")
	facIDs.Add "636E", "636"
	facIDs.Add "646E", "646"	
	

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------

    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then

            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False

        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)

		dim line

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)
        Else
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)

			'-------------------------------------------------------------------------
			' Read header information to find the satellite ID
			'-------------------------------------------------------------------------

			m_Satellite     = ""
			m_Station		= ""
			oRegExp.pattern = "(\S+)\s+(\S+)"

			Do Until m_Stream.AtEndOfStream

				line = m_Stream.ReadLine
				set oMatches = oRegExp.Execute(line)

				' If we found the satellite ID and stationID then we are done.

				if oMatches.Count = 1 then
					m_Satellite = oMatches(0).submatches(0)
					m_Station = oMatches(0).submatches(1)
					exit do
				end if

			loop

		End If

    End Function

	'-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)

        dim line, datetime, prevdatetime, obsval, station
        dim groundequip, antenna, calstatus, numObsSets
        DIm rg, az, el

		prevdatetime = ""

		pObsSet.Clear()
		numObsSets = 0

		' Note that we are going to process the entire file of data and return ALL
		' measurements.  We sort of have to because we need to be checking all the
		' time tags to identify obs sets.

		'-------------------------------------------------------------------------
		' parse the line (see sample below)
		'
		' 9876 5432
		' 1881:493217.000 1234.567 123.456 12.345
		' 1881:493218.000 1235.678 124.567 13.456
		'
		'-------------------------------------------------------------------------
		
		oRegExp.pattern  = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"

        Do Until m_Stream.AtEndOfStream or numObsSets > 0

            line = m_Stream.ReadLine
            set oMatches = oRegExp.Execute(line)

            if oMatches.Count = 1 then

                datetime    = oMatches(0).submatches(0)
                rg			= oMatches(0).submatches(1)
                az			= oMatches(0).submatches(2)
                el			= oMatches(0).submatches(3)
                

				pObsSet.Clear()
				pObsSet.Date.unit = "GPS"
				pObsSet.Date      = datetime

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit  = "GPS"
				pObs.Date       = datetime
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs. Facility must come first for 2-way ranging.
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, m_Station				' Facility must be first item
				pObs.TrackerIDs.Insert 1, m_Satellite 			' Satellite follows Facility


				'-------------------------------------------------------------------------
				' Range measurement
				'-------------------------------------------------------------------------

				pObs.MeasureType  = eMTRange
				pObs.value.Unit   = "km"
				pObs.value        = rg
				pObsSet.Add pObs


				'-------------------------------------------------------------------------
				' Azimuth measurement
				'-------------------------------------------------------------------------

				pObs.MeasureType  = eMTAzimuth
				pObs.value.Unit   = "deg"
				pObs.value        = az
				pObsSet.Add pObs


				'-------------------------------------------------------------------------
				' Elevation measurement
				'-------------------------------------------------------------------------

				pObs.MeasureType  = eMTElevation
				pObs.value.Unit   = "deg"
				pObs.value        = el
				pObsSet.Add pObs


				If pObsSet.Count > 0 Then
					setColl.Add pObsSet
					numObsSets = numObsSets + 1
				End If

        	End If

		Loop

        GetObsSet = numObsSets

    End Function  ' GetObsSet

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

