<?xml version="1.0"?>

<!-- ================================================== -->
<!--  This WSC is designed to read INTA's RaDec data    -->
<!--  that use an earth fixed coordinate system         -->
<!--						  							-->
<!--  author: jens ramrath								-->
<!--  date: 23 jan 2009									-->
<!-- ================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="WscVBS_INTA_MAT_OD6.wsc"
    progid="WscVBS_INTA_MAT_OD6.wsc"
    version="1.00"
    classid="{DD4E3F8F-EBA8-439c-A501-0E32DD67E395}"
>
</registration>

<public>
   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->
   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    
    Const eMTGPSNav_C1		  = 81
    Const eXComp	= 0
	Const eYComp	= 1
    Const eZComp	= 2

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08
    
    ' dim variables for GetFileName
    Dim satName, refSystem, obsNight, satNumber
    
    Dim doneRunning

	Dim debug
	
    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
    
	Set oRegExp = new RegExp


    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName
       
       ' parse the name to get satellite name out of it
		Dim splitName, fileName
		splitName = split(GetFileName, "\")
		
		fileName = split(splitName(UBound(splitName)), ".")

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if
        
		doneRunning = 0
		
    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim line, station, satellite
        dim meas_type, az, el, numSets
        Dim value

        numSets = 0
        pObsSet.Clear
    
    	debug = 0

		Dim xDim, yDim
		Dim matlabX, matlabY
		Dim vbDataArray
		Dim dataNum
		dataNum = 0

		if doneRunning = 0 then
			Dim Matlab
			Set Matlab = CreateObject("Matlab.Application")

			Matlab.Execute("clear all;")
			Matlab.Execute("data = load('" & m_sFileName & "');")
			Matlab.Execute("fName = fieldnames(data);")
			Matlab.Execute("dataArray = getfield(data, cell2mat(fName));")


			' check if this is double or cell
			Matlab.Execute("varType = class(dataArray);")
			Dim varType
			varType = Matlab.GetVariable("varType", "base")

			if varType = "cell" then

				' cell - loop through all data
				Matlab.Execute("[thisX, thisY] = size(dataArray);")
				Dim thisX, thisY
				thisX = Matlab.GetVariable("thisX", "base")
				thisY = Matlab.GetVariable("thisY", "base")

				Dim thisI, thisJ
				for thisI = 1 to thisX
					for thisJ = 1 to thisY
						Matlab.Execute("thisDataArray = cell2mat(dataArray(" & thisI & ", " & thisJ & "));")


						' *** BLOCK 1 ***
						Matlab.Execute("[x, y] = size(thisDataArray);")

						xDim = Matlab.GetVariable("x", "base")
						yDim = Matlab.GetVariable("y", "base")

						ReDim vbDataArray(xDim - 1, yDim - 1)

						for matlabX = 1 to xDim
							for matlabY = 1 to yDim
								call Matlab.PutWorkspaceData("matlabX", "base", matlabX)
								call Matlab.PutWorkspaceData("matlabY", "base", matlabY)
								Matlab.Execute("temp = thisDataArray(matlabX, matlabY);")
								vbDataArray(matlabX - 1, matlabY - 1) = Matlab.GetVariable("temp", "base")
							next
						next
						
						dataNum = data2OD(vbDataArray, setColl)
						numSets = numSets + dataNum
						' *** end BLOCK 1 ***

					next
				next
			else
				' double
				Matlab.Execute("thisDataArray = dataArray;")


				' *** BLOCK 2 ***
				Matlab.Execute("[x, y] = size(thisDataArray);")

				xDim = Matlab.GetVariable("x", "base")
				yDim = Matlab.GetVariable("y", "base")

				ReDim vbDataArray(xDim - 1, yDim - 1)


				for matlabX = 1 to xDim
					for matlabY = 1 to yDim
						call Matlab.PutWorkspaceData("matlabX", "base", matlabX)
						call Matlab.PutWorkspaceData("matlabY", "base", matlabY)
						Matlab.Execute("temp = thisDataArray(matlabX, matlabY);")
						vbDataArray(matlabX - 1, matlabY - 1) = Matlab.GetVariable("temp", "base")
					next
				next
				
				dataNum = data2OD(vbDataArray, setColl)

				numSets = numSets + dataNum
				' *** end BLOCK 2 ***

			end if
			doneRunning = 1

			if doneRunning = 1 then
				Matlab.Quit
				set Matlab = nothing
			end if

		end if
			
		GetObsSet = numSets

		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
	end Function




	Function data2OD(vbDataArray, setColl)
		' put satellite and station IDs in lookup table
		Dim satelliteID
		Set satelliteID = CreateObject("Scripting.Dictionary")
		satelliteID.Add "hispas", 1


		Dim stationID
		Set stationID = CreateObject("Scripting.Dictionary")
		stationID.Add "Astrografo_ROA", 	1000


		' ***** read header *****
		Dim spacecraftName
		Dim stationName

		Dim ra, dec, date, expDate, range
		Dim numSets
		numSets = 0

		' *********************
		' ***** READ DATA *****
		' *********************
		Dim lineCounter
		lineCounter = - 1
		
		Dim xDim, yDim
		xDim = UBound(vbDataArray, 1) + 1
		yDim = UBound(vbDataArray, 2) + 1

		
		'for lineCounter = 0 to xDim - 1
		Do Until lineCounter = (xDim - 1)
			lineCounter = lineCounter + 1

			' ***** parse measurement data *****
			' sample lines for range ModJDate
			' 3.7736369535733342e+04   5.4882048622700000e+04
			' 3.7736895152856174e+04   5.4882056261600002e+04
			' 3.7737526226473004e+04   5.4882066678199997e+04
			' sample lines for Ra Dec ModJDate:
			' 4.6896849235639482e-01  -9.9797917299625727e-02   5.4790887640277855e+04
			' 4.6899596366170765e-01  -9.9797878139810225e-02   5.4790894603588153e+04
			' 4.6899988439711077e-01  -9.9797330369807077e-02   5.4790895996064879e+04
			' sample lines for X Y Z ModJDate:
			' 8.8759648851712991e-01   4.4971754480234483e-01  -9.9632341481124209e-02   5.4790887640277855e+04
			' 8.8758413733453168e-01   4.4974192983025774e-01  -9.9632302516155360e-02   5.4790894603588153e+04
			' 8.8758242269102727e-01   4.4974543447714288e-01  -9.9631757471663612e-02   5.4790895996064879e+04



			' ***** data in 2 columns *****    		
			if yDim = 2 then

				range		= vbDataArray(lineCounter, 0)		' in km
				expDate		= vbDataArray(lineCounter, 1)		' ModJDate as exponential
				date		= CDbl(expDate)						' ModJDate as double


				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------
				pObsSet.Clear()
				pObsSet.Date.unit = "ModJDate"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------
				pObs.Date.unit	= "ModJDate"
				pObs.Date		= date
				pObs.TimeOrigin	= eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, 1000  		' Facility must be first item
				pObs.TrackerIDs.Insert 1, 1				' Satellite follows Facility


				pObs.MeasureType	= eMTRange
				pObs.Value.Unit		= "km"
				pObs.Value.Value	= range
				pObsSet.Add pObs


				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13)& Chr(10)) & "range: " & range)
				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If

			End If


			' ***** data in 3 columns *****    		
			if yDim = 3 then
				ra			= vbDataArray(lineCounter, 0)		' in radians
				'ra			= ra + 6.2060722222/180*3.14159265	' measurement is actually hour angle from observatory
				dec			= vbDataArray(lineCounter, 1) 	' in radians
				expDate		= vbDataArray(lineCounter, 2) 	' ModJDate as exponential
				date		= CDbl(expDate)					' ModJDate as double


				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "ModJDate"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit	= "ModJDate"
				pObs.Date		= date
				pObs.TimeOrigin	= eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, 1000  		' Facility must be first item
				pObs.TrackerIDs.Insert 1, 1				' Satellite follows Facility

				' RA
				pObs.MeasureType	= eMTRightAscension
				pObs.Value.Unit		= "radians"
				pObs.Value.Value	= ra
				pObsSet.Add pObs

				' Dec
				pObs.MeasureType	= eMTDeclination
				pObs.Value.Unit		= "radians"
				pObs.Value.Value	= dec
				pObsSet.Add pObs


				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13)& Chr(10)) & "RA: " & ra & (Chr(13)& Chr(10)) & "Dec: " & dec)
				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If

			End If



			' ***** data in 4 columns *****
			if yDim = 4 then
				Dim X, Y, Z

				X			= vbDataArray(lineCounter, 0)	' in km
				Y			= vbDataArray(lineCounter, 1) 	' in km
				Z			= vbDataArray(lineCounter, 2) 	' in km
				expDate		= vbDataArray(lineCounter, 3) 	' ModJDate as exponential
				date		= CDbl(expDate)					' ModJDate as double

				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "ModJDate"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit	= "ModJDate"
				pObs.Date		= date
				pObs.TimeOrigin	= eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, 1000  		' Facility must be first item
				pObs.TrackerIDs.Insert 1, 1				' Satellite follows Facility
				'pObs.TrackerIDs.Insert 1, satNumber		' Satellite follows Facility

				' X
				pObs.MeasureType		= eMTGPSNav_C1
				pObs.Value.Unit			= "km"
				pObs.Value.Value		= X
				pObs.CartesianComponent	= eXComp
				pObsSet.Add pObs

				' Y
				pObs.MeasureType		= eMTGPSNav_C1
				pObs.Value.Unit			= "km"
				pObs.Value.Value		= Y
				pObs.CartesianComponent	= eYComp
				pObsSet.Add pObs

				' Z
				pObs.MeasureType		= eMTGPSNav_C1
				pObs.Value.Unit			= "km"
				pObs.Value.Value		= Z
				pObs.CartesianComponent	= eZComp
				pObsSet.Add pObs

				if debug <> 0 then
					msgbox("Time: " & date & (Chr(13)& Chr(10)) & "X: " & X & (Chr(13)& Chr(10)) & "Y: " & Y & (Chr(13)& Chr(10)) & "Z: " & Z)
				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
			End If


		'Next
		Loop
		
		data2OD = numSets
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

