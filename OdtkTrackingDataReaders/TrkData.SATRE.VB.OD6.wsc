<?xml version="1.0"?>

<!-- ========================================================= -->
<!--  This WSC is designed to read SATRE tracking data format. -->
<!--  See TWSTFT data format for ODTK.pdf for a more detailed  -->
<!--  description of the format                                -->
<!--                                                           -->
<!--  author: jens ramrath                                     -->
<!--  date: 22 sep 2009                                        -->
<!-- ========================================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="SATRE custom data format"
    progid="TrkData.SATRE.VB.OD6.wsc"
    version="1.00"
    classid="{17E5CC9F-CD56-401d-9246-5C096C8CD627}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <!-- New method added to support ODTK 6.1.1 -->
   <method name="CloseFile"/>
</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp

    dim oRegExpSub, oMatchesSub, oMatchSub
	Set oRegExpSub = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim line
        dim range, rangeRate, numSets
        Dim value, units
        Dim messageID, date, time, modemID,	satelliteID, stationName, configTrip, stringID, receivStatus, rest
        Dim dateTime

		' put satellite and station IDs in lookup table
		Dim satID
		Set satID = CreateObject("Scripting.Dictionary")
		satID.Add "00000", 1
		satID.Add "mySat2", 2
		satID.Add "mySat3", 3
		
		Dim staID
		Set staID = CreateObject("Scripting.Dictionary")
		staID.Add "INT",	1001
		staID.Add "myFac2", 1002
		staID.Add "myFac3", 1003


        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0

    
		' ***** read header *****
		Dim stkVersion
		Dim scenarioEpoch
		Dim coordinateSystem
		Dim distanceUnit
		Dim numDataPoints
		

		' ***** read data *****
        Do Until m_Stream.AtEndOfStream   ' Or numSets > 0

            line = m_Stream.ReadLine
            

			' ***** parse measurement data *****
			' sample lines:
			' 2009/09/16;23:59:59;425;T2Lyynuuu;yyny;1;wnyin;0;00:00:00;  0;        0.00;        0.00;  0.00;  0.00;        0.000; 70000008.014;-62.4;***.*;1;wnyin;0;00:00:00;  0;        0.00;        0.00;  0.00;  
			' Tx :2009/09/16;23:59:59;425;00000;INT;1_0;TLyyny;yynuuuuu; 0.0;56.6; 0.0
			' Rx1:2009/09/16;23:59:59;425;00000;INT;1_0;TLwnyin;T;0; 0
			' Rx2:2009/09/16;23:59:59;425;00000;INT;1_0;TLwnyin;T;0; 0
			' Rx2:2009/09/17;04:50:57;425;00000;INT;0_0;TLtyycy;T;0;15;425;        0.006;        0.003; -0.000;  0.009;        0.005;  0.000;  0.000;        0.000;  0.0000; 70000013.001;-57.0; 70.9

			If isnumeric(left(trim(line), 3)) = false then
			
				Dim lineType
				if left(trim(line), 3) = "Tx " then
					lineType = 1
				elseif left(trim(line), 3) = "Rx1" then
					lineType = 2
				elseif left(trim(line), 3) = "Rx2" then
					lineType = 3
				else
					'msgbox("error ")
				end if
				
				
				' only read data if Rx1 or Rx2
				if lineType > 2 then
					'                   mID   YYYY/MM/DD   HH:mm:ss  insID  satID  staID config     lock
					oRegExp.pattern = "(...):(..........);(........);(...);(.....);(...);(...);(..)(.....)(.*)"
					oRegExp.global = false
					set oMatches = oRegExp.Execute(line)
				

					if oMatches.Count = 1 then

						messageID	= oMatches(0).submatches(0)
						date		= oMatches(0).submatches(1)
						time		= oMatches(0).submatches(2)
						modemID		= oMatches(0).submatches(3)
						satelliteID	= oMatches(0).submatches(4)
						stationName	= oMatches(0).submatches(5)
						configTrip	= oMatches(0).submatches(6)
						stringID	= oMatches(0).submatches(7)
						receivStatus= oMatches(0).submatches(8)
						rest		= oMatches(0).submatches(9)


						'-------------------------------------------------------------------------
						' config-triplett options:
						' 1st character:
						'	R = ranging
						'	P = pseudo-range
						'	T = TWSTFT
						'	S = timeSync
						' 2nd character
						'	S = short output format
						'	L = long output format
						'-------------------------------------------------------------------------
						if stringID = "TL" then
							Dim splitRest
							splitRest = split(rest, ";")
							Dim arrayLength
							arrayLength = ubound(splitRest)
							
							if arrayLength = 16 then
								Dim rawRange, meanRange, meanSpeed, jitter, meanRemoteRange, meanRemoteSpeed
								Dim meanRemoteJitter, meanClockDiff, meanClockDrift, actualRxFreq, signalPower, carrierToNoise

								rawRange		= splitRest(5)		' ns
								meanRange		= splitRest(6)		' ns
								meanSpeed		= splitRest(7)		' ns/s
								jitter			= splitRest(8)		' ns
								meanRemoteRange	= splitRest(9)		' ns
								meanRemoteSpeed	= splitRest(10)		' ns/s
								meanRemoteJitter= splitRest(11)		' ns
								meanClockDiff	= splitRest(12)		' ns
								meanClockDrift	= splitRest(13)		' ns/s
								actualRxFreq	= splitRest(14)		' Hz
								signalPower		= splitRest(15)		' dBm
								carrierToNoise	= splitRest(16)		' dBHz


								'-------------------------------------------------------------------------
								' Reassemble the date into a YYYY/MM/DD format.
								'-------------------------------------------------------------------------
								dateTime =  date & " " & time

								'-------------------------------------------------------------------------
								' Initialize observation and obs set
								'-------------------------------------------------------------------------
								pObsSet.Clear()
								pObsSet.Date.unit = "YYYY/MM/DD"
								pObsSet.Date      = dateTime

								'-------------------------------------------------------------------------
								' Initialize observation
								'-------------------------------------------------------------------------
								pObs.Date.unit = "YYYY/MM/DD"
								pObs.Date      = dateTime
								pObs.TimeOrigin = eGroundReceiveTime

								'-------------------------------------------------------------------------
								' Set up facility and satellite IDs
								' In TrackerIDs list: facility must come first
								'-------------------------------------------------------------------------
								pObs.TrackerIDs.Clear()
								pObs.TrackerIDs.Insert 0, staID(stationName)  	' Facility must be first item
								pObs.TrackerIDs.Insert 1, satID(satelliteID)	' Satellite follows Facility


								' convert range from us to m
								Dim rangeInM
								rangeInM = meanRange / 1000 / 1000 * AgCSpeedOfLight
								' convert rangeRate from us/s to m/s
								Dim rangeRateInMPS
								rangeRateInMPS = meanSpeed / 1000 / 1000 * AgCSpeedOfLight
								' convert jitter from us to m
								Dim jitterInM
								jitterInM = jitter / 1000 / 1000 * AgCSpeedOfLight
								

								' RANGE
								pObs.MeasureType	= eMTRange
								pObs.Value.Unit		= "m"
								pObs.Value.Value	= rangeInM
								pObs.WNSigma.Unit	= "m"
								pObs.WNSigma.Value	= jitterInM
								pObsSet.Add pObs

								' RANGE RATE
								pObs.MeasureType	= eMTDoppler
								pObs.Value.Unit		= "m/s"
								pObs.Value.Value	= rangeRateInMPS
								pObsSet.Add pObs

								if debug <> 0 then
									msgbox("Time: " & dateTime & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & staID(stationName) & " to " & satID(satelliteID))
									msgbox("Time: " & dateTime & (Chr(13) & Chr(10)) & "rawRange: " & rawRange & (Chr(13) & Chr(10)) & "meanRange: " & meanRange & (Chr(13) & Chr(10)) & "meanSpeed: " & meanSpeed & (Chr(13) & Chr(10)) & "jitter: " & jitter & (Chr(13) & Chr(10)) & "meanRemoteRange: " & meanRemoteRange & (Chr(13) & Chr(10)) & "meanRemoteSpeed: " & meanRemoteSpeed & (Chr(13) & Chr(10)) & "meanRemoteJitter: " & meanRemoteJitter & (Chr(13) & Chr(10)) & "meanClockDiff: " & meanClockDiff & (Chr(13) & Chr(10)) & "meanClockDrift: " & meanClockDrift & (Chr(13) & Chr(10)) & "actualRxFreq: " & actualRxFreq & (Chr(13) & Chr(10)) & "signalPower: " & signalPower & (Chr(13) & Chr(10)) & "carrierToNoise: " & carrierToNoise)
								end if
								
								'-------------------------------------------------------------------------
								' Any Valid Meas? 
								'-------------------------------------------------------------------------
								If pObsSet.Count > 0 Then
									numSets = numSets + 1
									setColl.Add pObsSet
								End If


							end if
						end if


					End If
				End If
			End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

	'-------------------------------------------------------------------------
	' CloseFile method
	'-------------------------------------------------------------------------

	Function CloseFile()

		If m_sFileName <> "" Then
			m_Stream.Close()
			m_sFileName = ""
		End If

	End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

