<?xml version="1.0"?>

<!-- ============================================= -->
<!--  This WSC is designed to read ISTRACs custom  -->
<!--  Chandrayaan tracking data format             -->
<!--                                               -->
<!--  author: jens ramrath                         -->
<!--  date: 11 mar 2009                             -->
<!-- ============================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="STK fixed ephemeris file format"
    progid="TrkData.ISTRAC.VBScript.wsc"
    version="1.00"
    classid="{37FD384B-DBBF-4c1e-B65C-CFBE46AA9E35}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp

    dim oRegExpSub, oMatchesSub, oMatchSub
	Set oRegExpSub = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim date, line, year, month, day, hour, min, sec, msec, usec, station, usecStation, satellite
        dim measType, az, azSD, el, elSD, range, rangeSD, rangeRate, rangeRateSD, rest, err, numSets
        Dim value, units, revNum, staID, satID, trackSys, seconds

        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0


		' put satellite and station IDs in lookup table
		Dim satelliteID
		Set satelliteID = CreateObject("Scripting.Dictionary")
		satelliteID.Add "IP6", 1001
		satelliteID.Add "CA1", 1002
		satelliteID.Add "HM1", 1003
		satelliteID.Add "CA2", 1004
		satelliteID.Add "C2A", 1005
		satelliteID.Add "TWS", 1006
		satelliteID.Add "CH1", 1007
		


		Dim stationID
		Set stationID = CreateObject("Scripting.Dictionary")
		stationID.Add "BLW", 	1		' BANGALORE-W
		stationID.Add "SH1",	2		' SHAR-1
		stationID.Add "LK1",	3		' LUCKNOW-1
		stationID.Add "MAU",	4		' MAURITIUS
		stationID.Add "MARITIUS",	4	' MAURITIUS
		stationID.Add "TVM",	10		' TRVANDRUM
		stationID.Add "TRIVNDRM",	10	' TRVANDRUM
		stationID.Add "SH2",	12		' SHAR-2
		stationID.Add "BI1",	13		' BIAK
		stationID.Add "BLE",	16		' BANGALORE-E
		stationID.Add "SB3",	17		' SVALBARD-3
		stationID.Add "PBR",	18		' PORTBLAIR
		stationID.Add "BI2",	21		' BIAK-2
		stationID.Add "LK2",	22		' LUCKNOW-2
		stationID.Add "BL3",	23		' BANGALORE-3
		stationID.Add "BP1",	24		' BHOPAL-1
		stationID.Add "BRU",	27		' BRUNEI
		stationID.Add "SB1",	28		' SVALBARD-1
		stationID.Add "SB2",	29		' SVALBARD-2
		stationID.Add "D18",	30		' IDSN-18
		stationID.Add "IDSN-18",	30	' IDSN-18
		stationID.Add "D32",	31		' IDSN-32
		stationID.Add "IDSN-32",	31	' IDSN-32


		Dim measureType
		Set measureType = CreateObject("Scripting.Dictionary")
		measureType.Add "rangeRate"	, 6
		measureType.Add "range"		, 3
		measureType.Add "azEl"		, 4


    
		' ***** read header *****
		Dim spacecraftName
		Dim stationName
		
		Dim stkVersion
		Dim scenarioEpoch
		Dim coordinateSystem
		Dim distanceUnit
		Dim numDataPoints
		



		' ***** read data *****
        Do Until m_Stream.AtEndOfStream   ' Or numSets > 0

            line = m_Stream.ReadLine
            

			' ***** parse measurement data *****
			' sample lines for regular data:
			' 2009  3  1  3 24 22 752   022 6      -5165.771890                                        0.034037             11542  LK2       CA2  ENER
			' 2009  3  1  3 24 40 752   022 6      -4992.388768                                        0.046179             11542  LK2       CA2  ENER
			' 2009  3  1  3 24 58 752   022 6      -4795.579411                                        0.028591             11542  LK2       CA2  ENER
			' 2009  3  1  3 25 16 752   022 6      -4572.458467                                        0.020370             11542  LK2       CA2  ENER

    		' sample lines for Chandrayaan data
			' 2009  4 19  1 40  1 637   011 3  393056858.208236                                        1.102754              1960  IDSN-18   CH1  CRTX M    1  2054.195000   18737.02862500     
			' 2009  4 19  1 40 27   0   011 6        373.917973                                        0.000463              1960  IDSN-18   CH1  CRTX M    1  2054.195000                   0  
			' 2009  4 19  3 14 34  92 55222 3    2532231.400840                                        8.259424             12266  LK2       CA2  ENER
			' 2009  4 19  3 14 40   0   022 4         49.222650          3.214795                      0.036137    0.036931 12266  LK2       CA2  ENER

			' 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123
			' 2009  3  3  0  0 46   0   014 6       1504.054048                           0.006698              1385  APL-18    CH1  CRTX M    1  2054.195000                   0
			' 2009  3  3  3 18 31 850   014 3  370584080.339477                                        2.981269 1387  APL-18    CH1  CRTX M    1  2054.195000   18737.02862500   

    		
    		
            oRegExp.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s(...)(..)\s+(\S+)\s+(.*)"
            oRegExp.global = false
            set oMatches = oRegExp.Execute(line)
                                    
            if oMatches.Count = 1 then
            	
            	year		= oMatches(0).submatches(0)
            	month		= oMatches(0).submatches(1)
            	day			= oMatches(0).submatches(2)
				hour		= oMatches(0).submatches(3)
				min			= oMatches(0).submatches(4)
                sec			= oMatches(0).submatches(5)
                msec		= oMatches(0).submatches(6)
				usec		= oMatches(0).submatches(7)

                station		= oMatches(0).submatches(8)
                
            	measType	= oMatches(0).submatches(9)
            	
				rest		= oMatches(0).submatches(10)
				
				
				Dim predMeas, intTime, freqDown, rangeAmb
				
				' parse depending on measType
				if measType = 3 then		' RANGE
					oRegExpSub.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
					oRegExpSub.global = false
            		set oMatchesSub = oRegExpSub.Execute(rest)
            		
            		range		= oMatchesSub(0).submatches(0)
            		rangeSD		= oMatchesSub(0).submatches(1)
            		revNum		= oMatchesSub(0).submatches(2)
            		staID		= oMatchesSub(0).submatches(3)
            		satID		= oMatchesSub(0).submatches(4)
            		trackSys	= oMatchesSub(0).submatches(5)
            		predMeas	= oMatchesSub(0).submatches(6)
            		intTime		= oMatchesSub(0).submatches(7)
            		freqDown	= oMatchesSub(0).submatches(8)
            		rangeAmb	= oMatchesSub(0).submatches(9)
            		
            		
				elseif measType = 4 then	' AZ EL
					oRegExpSub.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
					
					oRegExpSub.global = false
					set oMatchesSub = oRegExpSub.Execute(rest)
					            		
					az			= oMatchesSub(0).submatches(0)
					el			= oMatchesSub(0).submatches(1)
					azSD		= oMatchesSub(0).submatches(2)
					elSD		= oMatchesSub(0).submatches(3)
					revNum		= oMatchesSub(0).submatches(4)
					staID		= oMatchesSub(0).submatches(5)
					satID		= oMatchesSub(0).submatches(6)
            		trackSys	= oMatchesSub(0).submatches(7)
            		predMeas	= oMatchesSub(0).submatches(8)
					intTime		= oMatchesSub(0).submatches(9)
            		freqDown	= oMatchesSub(0).submatches(10)
            		
				elseif measType = 6 then	' RANGE RATE
					oRegExpSub.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
					oRegExpSub.global = false
            		set oMatchesSub = oRegExpSub.Execute(rest)
            		
            		rangeRate	= oMatchesSub(0).submatches(0)
            		rangeRateSD	= oMatchesSub(0).submatches(1)
            		revNum		= oMatchesSub(0).submatches(2)
            		staID		= oMatchesSub(0).submatches(3)
            		satID		= oMatchesSub(0).submatches(4)
            		trackSys	= oMatchesSub(0).submatches(5)
            		predMeas	= oMatchesSub(0).submatches(6)
					intTime		= oMatchesSub(0).submatches(7)
            		freqDown	= oMatchesSub(0).submatches(8)
					
				end if
            	

				'-------------------------------------------------------------------------
				' Reassemble the date into a YYYY/MM/DD format. This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------

				seconds = sec + msec/1000 + usec/1000000
				date =  year & "/" & month & "/" & day & " " & hour & ":" & min & ":" & seconds

				'-------------------------------------------------------------------------
				' Initialize observation and obs set
				'-------------------------------------------------------------------------

				pObsSet.Clear()
				pObsSet.Date.unit = "YYYY/MM/DD"
				pObsSet.Date      = date

				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------

				pObs.Date.unit = "YYYY/MM/DD"
				pObs.Date      = date
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------

				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, stationID(staID)  	' Facility must be first item
				pObs.TrackerIDs.Insert 1, satelliteID(satID)	' Satellite follows Facility


				if measType = 4 then
					' Az
					pObs.MeasureType	= eMTAzimuth
					pObs.Value.Unit		= "deg"
					pObs.Value.Value	= az
					pObs.WNSigma.Value	= azSD
					pObsSet.Add pObs

					' El
					pObs.MeasureType	= eMTElevation
					pObs.Value.Unit		= "deg"
					pObs.Value.Value	= el
					pObs.WNSigma.Value	= elSD
					pObsSet.Add pObs
					
					if debug <> 0 then
						msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & stationID(staID) & " to " & satelliteID(satID))
					end if
				elseif measType = 3 then

					pObs.MeasureType	= eMTRange
					pObs.Value.Unit		= "m"
					pObs.Value.Value	= range
					pObs.WNSigma.Value	= rangeSD
					pObsSet.Add pObs
					
					if debug <> 0 then
						msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & stationID(staID) & " to " & satelliteID(satID))
					end if

				elseif measType = 6 then
					pObs.MeasureType	= eMTDoppler
					pObs.Value.Unit		= "m/sec"
					pObs.Value.Value	= rangeRate
					pObs.WNSigma.Value	= rangeRateSD
					pObsSet.Add pObs
					
					if debug <> 0 then
						msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & stationID(staID) & " to " & satelliteID(satID))
					end if

				end if


				'-------------------------------------------------------------------------
				' Any Valid Meas? 
				'-------------------------------------------------------------------------

				If pObsSet.Count > 0 Then
					numSets = numSets + 1
					setColl.Add pObsSet
				End If
					
        	End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

