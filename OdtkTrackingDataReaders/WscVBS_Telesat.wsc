<?xml version="1.0"?>

<!-- ===================================================== -->
<!--  Copyright 2006, Analytical Graphics, Inc.            -->
<!--                                                       -->
<!--  This file sets up the ODTK reader for Inmarsat       -->
<!--                                                       -->
<!--  http://www.guidgenerator.com/                        -->
<!--                                                       -->
<!--  dvallado  23 aug 2011  fix for multiple obs at one time -->
<!--  dvallado  26 sep 2013  fix for using MJSD instead of -->
<!--  human readable (~0.0006 sec diff)                    -->
<!-- ===================================================== -->


<component>

<?component error="true" debug="true"?>

<registration
    description="TELESAT Format"
    progid="WscVBS_TELESAT.wsc"
    version="1.00"
    classid="{bf513758-b4a8-4a91-8c55-45f8070075da}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <method name="GetRegKey"/>

  <!-- New method added to support ODTK 6.1.1 -->

  <method name="CloseFile"/>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2
    Const ForAppending = 8

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
    Dim m_sfileSysObj, m_Stream, m_sFileName, m_Satellite
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    m_sFileName       = ""

    '-------------------------------------------------------------------------
  	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	  Set oRegExp = new RegExp

    '-------------------------------------------------------------------------
	  ' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)

    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    Function GetFileName()
       GetFileName = m_sFileName
    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------
    Function GetSupportsSave()
       GetSupportsSave = False
    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------
    Function GetSupportsMultipleTrackers()
       GetSupportsMultipleTrackers = True
    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------
    Function Reset()
        if m_sFileName <> "" Then
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
        End if
    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------
    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)
            
      			'' ---- Look for the satellite ID number embedded in the file name in parens
            'oRegExp.pattern = ".*\((\d+)\)"
            'oRegExp.global = false
            'set oMatches = oRegExp.Execute(m_sFileName)
            'if oMatches.Count = 1 then
			      '    m_Satellite = oMatches(0).submatches(0)
        		'	else
				    '    msgbox("Can't identify satellite ID in file " & m_sFileName)
       			'end if
        End If
    End Function

    '-------------------------------------------------------------------------
    ' CloseFile method
    '-------------------------------------------------------------------------

    Function CloseFile()

        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------
    Function GetObsSet(setColl)
        dim date, line, datetime, prevdatetime, obsval1, obsval2, obsval3, mjd
        dim meas_type, numObsSets, prevstation, ktr
        dim station, satellite, autoTrk, year, dayofyr, mon, day, hr, minute, second, Hsecond, hsecCorr, secCorr    
        
        prevdatetime = ""	
        prevstation = ""
		    pObsSet.Clear()
		    numObsSets = 0
		
		    ' Note that we are going to process the entire file of data and return ALL
		    ' measurements.  We sort of have to because we need to be checking all the
		    ' time tags to identify obs sets.
        Do Until m_Stream.AtEndOfStream

            line = m_Stream.ReadLine
			      '-------------------------------------------------------------------------
			      ' parse the line (see sample below
			      '
			      '  AZ  33 1 0 2004 061  21 13 20 30 00 00 218.635  13.491  34963.909  15
			      ' Sat ant ATt yyyy jjj  hh mm ss *cc corrs Az dg   El dg    Rg  km    Nb 
			      '*cc is hundredths of secs, not milli sec, so 20.30 secs above
			      'AutoT(AT) = 1 = Antenna in autotrack
			      'Type(t) = 0 Rng and Az/El
			      'Type = 1 Rng
			      'Type = 2 Az/El 
            ' nicely they have space delimited
            '-------------------------------------------------------------------------
            oRegExp.pattern  = "^\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
            oRegExp.global = false
            set oMatches = oRegExp.Execute(line)
            
            if oMatches.Count = 1 then
                satellite   = oMatches(0).submatches(0)
                station     = oMatches(0).submatches(1)
                autoTrk     = oMatches(0).submatches(2)
                meas_type   = 1 * oMatches(0).submatches(3) 
				year        = oMatches(0).submatches(4) 
				dayofyr     = oMatches(0).submatches(5) 
				hr          = oMatches(0).submatches(6) 
				minute      = oMatches(0).submatches(7) 
				second      = oMatches(0).submatches(8) 
				Hsecond     = oMatches(0).submatches(9) 
				secCorr     = oMatches(0).submatches(10) 
				hsecCorr    = oMatches(0).submatches(11) 

				'-------------------------------------------------------------------------
				' Reassemble the date into a UTCJFOUR format.  This is the closest
				' representation to what was input and avoids messy date
				' conversion code.  Let ODTK do the work!
				'-------------------------------------------------------------------------
				' note, fraction is not fractions of a day, rather hrminsec bunched together
				
                date =  year & dayofyr & ". " & hr & minute & (second + Hsecond/100.0)
                
                if meas_type = 0 then
                    ' this one is longer
                    oRegExp.pattern  = "^\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
                    oRegExp.global = false
                    set oMatches = oRegExp.Execute(line)
                    obsval1     = oMatches(0).submatches(14) 
                    obsval2     = oMatches(0).submatches(12) 
                    obsval3     = oMatches(0).submatches(13) 
                end if
                if meas_type = 1 then
                    obsval1     = oMatches(0).submatches(12) 
                end if
                if meas_type = 2 then
                    ' this one is longer
                    oRegExp.pattern  = "^\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
                    oRegExp.global = false
                    set oMatches = oRegExp.Execute(line)
                    obsval2     = oMatches(0).submatches(12) 
                    obsval3     = oMatches(0).submatches(13) 
                end if
 
                ' need to convert satellite string to number once we know what they are
                if (satellite = "AZ") then
                    m_Satellite = 100
                end if
 
                '-------------------------------------------------------------------------
				' Check to see if we need a new obs set (either on the first pass,
				' or because we found a new time tag).
				'-------------------------------------------------------------------------
				'   if (datetime <> prevdatetime) or ((datetime = prevdatetime) and (stationN <> prevstation)) then
				'			 ' Add any existing obs set to the collection
				'  	 If pObsSet.Count > 0 Then
				'        setColl.Add pObsSet
				'        numObsSets = numObsSets + 1
				'     End If
				'     prevdatetime = datetime					
				'	
				'       pObsSet.Clear()
				'       pObsSet.Date.unit = "YYYYDDD"    
				'       pObsSet.Date      = date       
				'   end if
				
				'-------------------------------------------------------------------------
				' Initialize observation
				'-------------------------------------------------------------------------
				pObs.Date.unit = "YYYYDDD"    
				pObs.Date      = date
				pObs.TimeOrigin = eGroundReceiveTime

				'-------------------------------------------------------------------------
				' Set up facility and satellite IDs
				' In TrackerIDs list: facility must come first
				'-------------------------------------------------------------------------
				pObs.TrackerIDs.Clear()
				pObs.TrackerIDs.Insert 0, station   	' Facility must be first item
				pObs.TrackerIDs.Insert 1, m_Satellite 	' Satellite follows Facility

				Select Case meas_type
				
					case 0
						' Range measurement
						pObs.MeasureType  = eMTRange
						pObs.value.Unit   = "km"
						pObs.value        = obsval1/1000.0
						pObsSet.Add pObs

						' Azimuth measurement
						pObs.MeasureType  = eMTAzimuth
						pObs.value.Unit   = "deg"
						pObs.value        = obsval2
						pObsSet.Add pObs

						' Elevation measurement
						pObs.MeasureType  = eMTElevation
						pObs.value.Unit   = "deg"
						pObs.value        = obsval3
						pObsSet.Add pObs

					case 1
						' Range measurement
						pObs.MeasureType  = eMTRange
						pObs.value.Unit   = "km"
						pObs.value        =  obsval1/1000.0
						pObsSet.Add pObs

					case 2
						' Azimuth measurement
						pObs.MeasureType  = eMTAzimuth
						pObs.value.Unit   = "deg"
						pObs.value        = obsval2
						pObsSet.Add pObs

						' Elevation measurement
						pObs.MeasureType  = eMTElevation
						pObs.value.Unit   = "deg"
						pObs.value        = obsval3
						pObsSet.Add pObs

				End Select
        
				If pObsSet.Count > 0 Then
					numObsSets = numObsSets + 1
					setColl.Add pObsSet
				End If

				pObsSet.Clear()
				pObsSet.Date.unit = "YYYYDDD"    
				pObsSet.Date      = date       
	                
        	End If
        	
		Loop
		
		'------------------------------------------------------------------------
		' Any last obs sets that need to be added?
		'-------------------------------------------------------------------------

		If pObsSet.Count > 0 Then
			setColl.Add pObsSet
			numObsSets = numObsSets + 1
		End If
		
        GetObsSet = numObsSets

    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

