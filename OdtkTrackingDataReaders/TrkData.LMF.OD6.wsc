<?xml version="1.0"?>

<!-- ============================================= -->
<!--  This WSC is designed to read the LMF GPS     -->
<!--  tracking data format                         -->
<!--                                               -->
<!--  author: jens ramrath                         -->
<!--  date: 23 mar 2009                            -->
<!--  update 13-nov-09: to work with ODTKv6        -->
<!--  update 19 may 17: to work for Algerian       -->
<!--                    Space Agency GPS data      -->
<!--  update 13 jun 17: to work with Algerian      -->
<!--                    Space Agency doppler data  -->
<!-- ============================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="STK fixed ephemeris file format"
    progid="TrkData.LMF.OD6.wsc"
    version="1.00"
    classid="{B1BBE09D-0900-4d21-9C9D-5FEA7BCC095C}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

   <!-- New method added to support ODTK 6.1.1 -->
   <method name="CloseFile"/>
</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    
    Const eMTGPSNav_C1		  = 81

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3
    
    Const eXComp	= 0
    Const eYComp	= 1
    Const eZComp	= 2

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp

    dim oRegExpSub, oMatchesSub, oMatchSub
	Set oRegExpSub = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim date, line, year, month, day, hour, min, sec, msec, usec, station, usecStation, satellite
        dim measType, az, azSD, el, elSD, range, rangeSD, rangeRate, rangeRateSD, rest, err, numSets
        Dim value, units, revNum, staID, trackSys, seconds


        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0


		Dim satelliteID
		Set satelliteID = CreateObject("Scripting.Dictionary")
		satelliteID.Add "ALSB", 	1001

		Dim receiverID
		Set receiverID = CreateObject("Scripting.Dictionary")
		receiverID.Add "ALSB", 	801

		Dim stationID
		Set stationID = CreateObject("Scripting.Dictionary")
		stationID.Add "EQPT_S", 	1




    	' ***********************
		' ***** read header *****
		' ***********************
		Dim spacecraftName
		Dim stationName
		
		Dim fileType
		Dim fileFormat
		Dim genDate
		Dim genAppName
		Dim genAppRls
		Dim satID
		
		
		
		line = "null"

		Do Until m_Stream.AtEndOfStream or line = "END_FILE_HEADER"
			line = trim(m_Stream.ReadLine)

			if line <> "" then
				' parse header
				oRegExp.pattern = "(\S+)\s+(.*)"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count > 0 then
					dim part1
					dim part2
					part1 = oMatches(0).submatches(0)
					part2 = oMatches(0).submatches(1)

					if debug <> 0 then
						msgbox("part1: " & part1 & (Chr(13)& Chr(10)) & "part2: " & part2)
					end if

					' file type
					if UCase(part1) = "FILE_TYPE:=" then
						fileType = part2
					end if

					' file format
					if UCase(part1) = "FILE_FORMAT:=" then
						fileFormat = part2
					end if

					' gen date
					if UCase(part1) = "GEN_DATE:=" then
						genDate = part2
					end if

					' 
					if UCase(part1) = "GEN_APP_NAME:=" then
						genAppName = part2
					end if

					' 
					if UCase(part1) = "GEN_APP_RLS:=" then
						genAppRls = part2
					end if

				end if
			end if
			
		loop
		
		if debug <> 0 then
			msgbox("finished reading the header")
		end if


		' *********************
		' ***** read data *****
		' *********************
		Dim front, time, data1, data2, data3, data4, measure

        Do Until m_Stream.AtEndOfStream   ' Or numSets > 0

            line = m_Stream.ReadLine
            

			' ***** parse measurement data *****
			' sample lines:
			' MEAS:= 2009/03/09 13:56:51.164 PX GPS     FILTER  IB    -3429.178500000000 EC
			' MEAS:= 2009/03/09 13:56:51.164 PY GPS     FILTER  IB     6221.983000000000 EC
			' MEAS:= 2009/03/09 13:56:51.164 PZ GPS     FILTER  IB     1199.821250000000 EC
			' MEAS:= 2009/03/09 13:56:51.164 VX GPS     FILTER  IB        2.054423828125 EC
			' MEAS:= 2009/03/09 13:56:51.164 VY GPS     FILTER  IB       -0.276117553711 EC
			' MEAS:= 2009/03/09 13:56:51.164 VZ GPS     FILTER  IB        7.246750000000 EC
			' or
			' MEAS:= 2017/06/07 20:33:47.000 DO ORN     EQPT_S  ON    31930.000000000000 NM
			' MEAS:= 2017/06/07 20:33:48.000 DO ORN     EQPT_S  ON    46384.000000000000 NM
			' MEAS:= 2017/06/07 20:33:49.000 DO ORN     EQPT_S  ON    46361.000000000000 NM
			' MEAS:= 2017/06/07 20:33:50.000 DO ORN     EQPT_S  ON    46338.000000000000 NM
			' MEAS:= 2017/06/07 20:33:51.000 DO ORN     EQPT_S  ON    46314.000000000000 NM
			


			' read satID
			if left(line, 8) = "SAT_ID:=" then
				satID = Trim(mid(line, 9))

				if debug <> 0 then
					msgbox("satID: " & satID)
				end if


			' read data
			else
    		
				oRegExp.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count = 1 then

					front		= oMatches(0).submatches(0)
					day			= oMatches(0).submatches(1)
					time		= oMatches(0).submatches(2)
					measType	= oMatches(0).submatches(3)
					data1		= oMatches(0).submatches(4)
					data2		= oMatches(0).submatches(5)
					data3		= oMatches(0).submatches(6)
					measure		= oMatches(0).submatches(7)
					data4		= oMatches(0).submatches(8)
					
					
					
					'-------------------------------------------------------------------------
					' Reassemble the date into a YYYY/MM/DD format. This is the closest
					' representation to what was input and avoids messy date
					' conversion code.  Let ODTK do the work!
					'-------------------------------------------------------------------------

					' there is a 1 sec offset for Doppler data. GPS should be fine
					if measType = "D2" then
						Dim splitTime, splitHour, splitMins, splitSecs
						splitTime = split(time, ":")
						splitHour = splitTime(0)
						splitMins = splitTime(1)
						splitSecs = splitTime(2)

						if splitSecs > 1 then
							time = splitHour & ":" & splitMins & ":" & formatNumber(splitSecs - 1, 6)
						elseif splitSecs < 1 AND splitMins > 0 then
							time = splitHour & ":" & splitMins - 1 & ":" & splitSecs + 59
						else 	'splitSecs < 1 AND splitMins = 0 AND splitHours > 0 then
							time = splitHour - 1 & ":" & splitMins + 59 & ":" & splitSecs + 59
						end if
					end if
					
					date = day & " " & time


					'-------------------------------------------------------------------------
					' Initialize observation and obs set
					'-------------------------------------------------------------------------

					pObsSet.Clear()
					pObsSet.Date.unit = "YYYY/MM/DD"
					pObsSet.Date      = date

					'-------------------------------------------------------------------------
					' Initialize observation
					'-------------------------------------------------------------------------

					pObs.Date.unit = "YYYY/MM/DD"
					pObs.Date      = date
					pObs.TimeOrigin = eGroundReceiveTime



					if measType = "D2" or measType = "DO" then
						' 2-way doppler

						'-------------------------------------------------------------------------
						' Set up facility and satellite IDs
						' In TrackerIDs list: facility must come first
						'-------------------------------------------------------------------------

						pObs.TrackerIDs.Clear()
						
						if measType = "D2" then
							pObs.TrackerIDs.Insert 0, stationID(data1)  	' Facility must be first item
						else
							pObs.TrackerIDs.Insert 0, stationID(data2)  	' Facility must be first item
						end if
						pObs.TrackerIDs.Insert 1, satelliteID(satID)	' Satellite follows Facility

						' convert data from Hz to m/s
						' df = -v/c*f0
						' where:
						'	df = frequency shift
						'	v  = velocity of source with respect to receiver
						'	c  = speed of light		= AgCSpeedOfLight (2.997924580000000E+08 m/s)
						'	f0 = emitted frequency	= 2266.5 MHz.
						
						Dim velocity
						velocity = -measure*AgCSpeedOfLight/(2266.5*1000000)

						pObs.MeasureType	= eMTDoppler
						pObs.Value.Unit		= "m/sec"
						pObs.Value.Value	= velocity
						pObsSet.Add pObs

						if debug <> 0 then
							msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & (Chr(13) & Chr(10)) & stationID(staID) & " to " & satelliteID(satID))
						end if

					elseif data1 = "RG" then
						' RANGE
						'-------------------------------------------------------------------------
						' Set up facility and satellite IDs
						' In TrackerIDs list: facility must come first
						'-------------------------------------------------------------------------
						pObs.TrackerIDs.Clear()
						pObs.TrackerIDs.Insert 0, stationID(data2)  	' Facility must be first item
						pObs.TrackerIDs.Insert 1, satelliteID(satID)	' Satellite follows Facility


						pObs.MeasureType	= eMTRange
						pObs.Value.Unit		= "km"
						pObs.Value.Value	= measure

						pObsSet.Add pObs

						if debug <> 0 then
							msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & "stationID: " & data2 & (Chr(13) & Chr(10)) & "satelliteID: " & satID & (Chr(13) & Chr(10)) & stationID(data2) & " to " & satelliteID(satID))
						end if

					elseif data1 = "GPS" and left(measType, 1) = "P" then
						' GPS
						'-------------------------------------------------------------------------
						' Set up facility and satellite IDs
						' In TrackerIDs list: facility must come first
						'-------------------------------------------------------------------------
						pObs.TrackerIDs.Clear()
						pObs.TrackerIDs.Insert 0, receiverID(satID)


						pObs.MeasureType	= eMTGPSNav_C1
						pObs.Value.Unit		= "km"
						pObs.Value.Value	= measure

						select case measType
						case "PX"
							pObs.CartesianComponent	= eXComp
						case "PY"
							pObs.CartesianComponent	= eYComp
						case "PZ"
							pObs.CartesianComponent	= eZComp
						end select
						
						pObsSet.Add pObs

						if debug <> 0 then
							msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & stationID(staID) & " to " & satelliteID(satID))
						end if
					end if
					


					'-------------------------------------------------------------------------
					' Any Valid Meas? 
					'-------------------------------------------------------------------------

					If pObsSet.Count > 0 Then
						numSets = numSets + 1
						setColl.Add pObsSet
					End If
					
				End If
					
        	End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

	'-------------------------------------------------------------------------
	' CloseFile method
	'-------------------------------------------------------------------------

	Function CloseFile()

		If m_sFileName <> "" Then
			m_Stream.Close()
			m_sFileName = ""
		End If

	End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

