<?xml version="1.0"?>

<!-- ============================================= -->
<!--  This WSC is designed to read the OASYS       -->
<!--  tracking data format used by Es'HailSat      -->
<!--                                               -->
<!--  author: jens ramrath                         -->
<!--  date: 15 mar 2019                            -->
<!-- ============================================= -->


<component>

<?component error="true" debug="true"?>

<registration
    description="STK fixed ephemeris file format"
    progid="TrkData.Eshailsat.wsc"
    version="1.00"
    classid="{66B17A1F-2289-4754-B3DA-697482218C08}"
>
</registration>

<public>

   <!-- Properties -->

   <property name="FileName">
      <get internalName="GetFileName"/>
   </property>

   <property name="SupportsMultipleTrackers">
      <get internalName="GetSupportsMultipleTrackers"/>
   </property>

   <property name="SupportsSave">
      <get internalName="GetSupportsSave"/>
   </property>

   <!-- Methods -->

   <method name="Reset"/>

   <method name="OpenFile">
      <parameter name="newVal"/>
      <parameter name="newFile"/>
   </method>

   <method name="GetObsSet">
      <parameter name="setCollection"/>
   </method>

   <method name="GetSupportedObsSet">
      <parameter name="setColl"/>
   </method>

   <method name="SaveObs">
      <parameter name="pEnum"/>
      <parameter name="bAppend"/>
   </method>

</public>

<script language="VBScript">
<![CDATA[
	
    '-------------------------------------------------------------------------
    ' Member variables
    '-------------------------------------------------------------------------

    Option explicit

    Const ForReading   = 1
    Const ForWriting   = 2

    Const eMTRange            = 1
    Const eMTDoppler          = 2
    Const eMTAzimuth          = 11
    Const eMTElevation        = 12

    Const eMTRightAscension   = 18
    Const eMTDeclination      = 19
    Const eMTSBRightAscension = 31
    Const eMTSBDeclination    = 32
    Const eMTSBRange          = 33
    Const eMTSBAzimuth        = 34
    Const eMTSBElevation      = 35
    
    Const eMTGPSNav_C1		  = 81

    Const eGroundReceiveTime     = 0
    Const eSatelliteTransmitTime = 1
    Const eGroundTransmitTime    = 2
    Const eSatelliteReceiveTime  = 3
    
    Const eXComp	= 0
    Const eYComp	= 1
    Const eZComp	= 2

    '-------------------------------------------------------------------------
	' define some global variables we'll be using
    '-------------------------------------------------------------------------
	
    Dim m_sfileSysObj, m_Stream, m_sFileName
    
    Set m_sfileSysObj = CreateObject("Scripting.FileSystemObject")
    
    m_sFileName       = ""

    ' Define the speed of light (m/s)

    const AgCSpeedOfLight = 2.997924580000000E+08

    '-------------------------------------------------------------------------
	' define some regular expression objects that we'll be using
    '-------------------------------------------------------------------------
	
    dim oRegExp, oMatches, oMatch
	Set oRegExp = new RegExp

    dim oRegExpSub, oMatchesSub, oMatchSub
	Set oRegExpSub = new RegExp

    '-------------------------------------------------------------------------
	' Create obsSet and obs objects for use later on
    '-------------------------------------------------------------------------
    
    Dim version
    version = "6.0"

    Dim textFile, ObjectStr, versionStr, regValue, ODDBObjectFile
    versionStr = "HKEY_LOCAL_MACHINE\SOFTWARE\AGI\ODTK\" & version & "\InstallHome"
    GetRegKey(versionStr)

    ODDBObjectFile = m_sfileSysObj.Buildpath(regValue, "\ODTK\AppData\Scripts\MeasProviders\WindowsScriptComponents\" & "CreatODDBObjects.txt")
    Set textFile = m_sfileSysObj.OpenTextFile(ODDBObjectFile, ForReading)

    Dim pObsSet
    ObjectStr = textFile.ReadLine               ' ObjectStr = "AgMach10_5.AgODObsSet"  or similar
    Set pObsSet = CreateObject(ObjectStr)


    Dim pObs
    ObjectStr = textFile.ReadLine               ' ObjectStr = "IAgODProvideTrackingData5.AgODGenericObs"  or similar
    Set pObs = CreateObject(ObjectStr)

   '-------------------------------------------------------------------------
   ' Function GetFileName()
   '-------------------------------------------------------------------------
    
    Function GetFileName()

       GetFileName = m_sFileName

    End Function

    '-------------------------------------------------------------------------
    ' SupportsSave property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsSave()

       GetSupportsSave = False

    End Function

    '-------------------------------------------------------------------------
    ' SupportsMultipleTrackers property [read-only]
    '-------------------------------------------------------------------------

    Function GetSupportsMultipleTrackers()

       GetSupportsMultipleTrackers = True

    End Function

    '-------------------------------------------------------------------------
    ' Reset method
    '-------------------------------------------------------------------------

    Function Reset()

        if m_sFileName <> "" Then
            
            Dim newVal
            newVal = m_sFileName
            OpenFile newVal, False
            
        End if

    End Function

    '-------------------------------------------------------------------------
    ' OpenFile method
    '-------------------------------------------------------------------------

    Function OpenFile(newVal, newFile)
    
        If m_sFileName <> "" Then
            m_Stream.Close
            m_sFileName = ""
        End If

        m_sFileName = newVal

        If newFile Then        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForWriting, True)            
        Else        
            Set m_Stream = m_sfileSysObj.OpenTextFile(m_sFileName, ForReading)			
        End If

    End Function

    '-------------------------------------------------------------------------
    ' GetObsSet method
    '-------------------------------------------------------------------------

    Function GetObsSet(setColl)
        dim line, year, month, day, hour, min, sec, msec, usec, station, usecStation, satellite
        dim measType, az, azSD, el, elSD, range, rangeSD, rangeRate, rangeRateSD, rest, err, numSets
        Dim value, revNum, staID, trackSys, seconds


        numSets = 0
        pObsSet.Clear
    
    	Dim debug
    	debug = 0


		Dim satelliteID
		Set satelliteID = CreateObject("Scripting.Dictionary")
		satelliteID.Add "eh2", 	1001

		Dim stationID
		Set stationID = CreateObject("Scripting.Dictionary")
		stationID.Add "2KU", 	401
		stationID.Add "DSR", 	400



    	' ***********************
		' ***** read header *****
		' ***********************
		Dim stationName
		Dim satelliteName
		Dim timeUnits
		
		Dim fileType
		Dim fileFormat
		Dim genDate
		Dim satID
		
		
		
		line = "null"

		Do Until m_Stream.AtEndOfStream or UCase(line) = "TRACKING DATA:"
			line = trim(m_Stream.ReadLine)

			if line <> "" then
				' parse header
				oRegExp.pattern = "(.+):\s+(.*)"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count > 0 then
					dim part1
					dim part2
					part1 = oMatches(0).submatches(0)
					part2 = oMatches(0).submatches(1)

					if debug <> 0 then
						msgbox("part1: " & part1 & (Chr(13)& Chr(10)) & "part2: " & part2)
					end if

					' SPACECRAFT
					if UCase(part1) = "SPACECRAFT" then
						satelliteName = part2
					end if

					' STATION
					if UCase(part1) = "STATION" then
						stationName = part2
					end if

					' TIME UNITS:
					if UCase(part1) = "TIME UNITS" then
						timeUnits = part2
					end if

				end if
			end if
			
		loop
		
		if debug <> 0 then
			msgbox("finished reading the header")
		end if


		' *********************
		' ***** read data *****
		' *********************
		Dim time, data, mUnits, measure

        Do Until m_Stream.AtEndOfStream

            line = m_Stream.ReadLine

			' ***** parse measurement data *****
			' sample lines:
			' 2019/070 05:00:25.840  AZIMUTH     227.998  DEGREES
			' 2019/070 05:00:25.840  ELEVATION    49.081  DEGREES
			' 2019/070 05:00:25.840  AZIMUTH     227.998  DEGREES
			' or
			' 2019/03/11 05:21:47.000  AZIMUTH     154.2800000000000000  DEGREES
			' 2019/03/11 05:21:47.000  ELEVATION    44.1700000000000020  DEGREES
			' 2019/03/11 05:42:35.000  AZIMUTH     154.3100000000000000  DEGREES
			' 2019/03/11 05:42:35.000  ELEVATION    44.1899999999999980  DEGREES
			

			' read satID
			if Len(line) > 0 AND left(line, 1) <> "#" then

				oRegExp.pattern = "(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)"
				oRegExp.global = false
				set oMatches = oRegExp.Execute(line)

				if oMatches.Count = 1 then

					day			= oMatches(0).submatches(0)
					time		= oMatches(0).submatches(1)
					measType	= oMatches(0).submatches(2)
					data		= oMatches(0).submatches(3)
					mUnits		= oMatches(0).submatches(4)
					
					
					'-------------------------------------------------------------------------
					' There are two possible date formats, YYYY/MM/DD and YYYY/DDD
					'-------------------------------------------------------------------------
					Dim dateFormat
					Dim date
					
					if Trim(UCase(timeUnits)) = "YJHMS3" then
						date = Replace(day, "/", "-") & "T" & time
						dateFormat = "ISO-YD"
					else
						date = day & " " & time
						dateFormat = "YYYY/MM/DD"
					end if
					'-------------------------------------------------------------------------
					' Initialize observation and obs set
					'-------------------------------------------------------------------------

					pObsSet.Clear()
					pObsSet.Date.unit = dateFormat
					pObsSet.Date      = date

					'-------------------------------------------------------------------------
					' Initialize observation
					'-------------------------------------------------------------------------

					pObs.Date.unit = dateFormat
					pObs.Date      = date
					pObs.TimeOrigin = eGroundReceiveTime

					pObs.TrackerIDs.Clear()
					pObs.TrackerIDs.Insert 0, stationID(stationName)  	' Facility must be first item
					pObs.TrackerIDs.Insert 1, satelliteID(satelliteName)	' Satellite follows Facility


					if measType = "AZIMUTH" then
						pObs.MeasureType	= eMTAzimuth
					elseif measType = "ELEVATION" then
						pObs.MeasureType	= eMTElevation
					elseif measType = "RANGE" then
						pObs.MeasureType	= eMTRange
					end if

					pObs.Value.Unit		= mUnits   ' "m/sec"
					pObs.Value.Value	= data
					pObsSet.Add pObs


					if debug <> 0 then
						msgbox("Time: " & date & (Chr(13) & Chr(10)) & "Measurement: " & pObs.MeasureType & (Chr(13) & Chr(10)) & " value: " & pObs.Value.Value & " " & pObs.Value.Unit & (Chr(13) & Chr(10)) & "stationID: " & stationID(stationName) & (Chr(13) & Chr(10)) & "satelliteID: " & satelliteID(satelliteName))
					end if
					


					'-------------------------------------------------------------------------
					' Any Valid Meas? 
					'-------------------------------------------------------------------------

					If pObsSet.Count > 0 Then
						numSets = numSets + 1
						setColl.Add pObsSet
					End If
					
				End If
					
        	End If
		Loop
		
		
        GetObsSet = numSets
        
		if debug <> 0 then
			msgbox("at end of GetObsSet")
		end if
		
    End Function

    '-------------------------------------------------------------------------
    ' GetSupportedObsSet method
    '-------------------------------------------------------------------------

    Function GetSupportedObsSet(setColl)
	    Dim numSets
        numSets = 0
        GetSupportedObsSet = numSets
    End Function

    '-------------------------------------------------------------------------
    ' SaveObs method
    '-------------------------------------------------------------------------

    Function SaveObs(pEnum, bAppend)
	    Dim nObsSaved
        nObsSaved = 0
        SaveObs = nObsSaved
    End Function


    Function GetRegKey (regKey)
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        regValue = objShell.RegRead(regKey)
        Set objShell = nothing
    End Function

]]>
</script>

</component>

